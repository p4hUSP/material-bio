{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Material \u00b6 Quem somos? \u00b6 A P4H \u00e9 um grupo formado por alunos de ci\u00eancias sociais com o objetivo de aproximar alunos e profissionais da \u00e1rea de tecnologia, programa\u00e7\u00e3o e an\u00e1lise de dados. Como estudar? \u00b6 Programa\u00e7\u00e3o n\u00e3o se aprende apenas lendo livros e assistindo aulas. \u00c9 fundamental que voc\u00ea dedique pelo menos 1 hora do seu dia para estudar. Al\u00e9m disso, recomendamos que voc\u00ea evite apenas copar e colar o c\u00f3digo do site para o seu computador. Escrever as fun\u00e7\u00f5es \u00e9 \u00f3timo para memoriz\u00e1-las e entender os par\u00e2metros que as fazem funcionar. O que \u00e9 uma linguagem de programa\u00e7\u00e3o e por que utilizamos uma para an\u00e1lise de dados? \u00b6 Uma das maiores diferen\u00e7as n\u00e3o diz respeito ao lado t\u00e9cnico. Analisar dados em Python ou em R \u00e9 gr\u00e1tis! Isso mesmo, voc\u00ea n\u00e3o precisa gastar um centavo para ter acesso a bibliotecas de an\u00e1lise de dados desenvolvidas pelo Google, Amazon, Projeto Apache, entre outras tantas. Al\u00e9m disso, ao contr\u00e1rio do Excel, do Stata e do SPSS, o R lhe d\u00e1 liberdade para resolver problemas mediante algor\u00edtmos . Ou seja, se voc\u00ea \u00e9 capaz de descrever um passo-a-passo, uma receita, de como obter um resultado a partir de determinadas entradas, podemos escrever um programa e deixar que o computador fa\u00e7a o resto.","title":"Material"},{"location":"#material","text":"","title":"Material"},{"location":"#quem-somos","text":"A P4H \u00e9 um grupo formado por alunos de ci\u00eancias sociais com o objetivo de aproximar alunos e profissionais da \u00e1rea de tecnologia, programa\u00e7\u00e3o e an\u00e1lise de dados.","title":"Quem somos?"},{"location":"#como-estudar","text":"Programa\u00e7\u00e3o n\u00e3o se aprende apenas lendo livros e assistindo aulas. \u00c9 fundamental que voc\u00ea dedique pelo menos 1 hora do seu dia para estudar. Al\u00e9m disso, recomendamos que voc\u00ea evite apenas copar e colar o c\u00f3digo do site para o seu computador. Escrever as fun\u00e7\u00f5es \u00e9 \u00f3timo para memoriz\u00e1-las e entender os par\u00e2metros que as fazem funcionar.","title":"Como estudar?"},{"location":"#o-que-e-uma-linguagem-de-programacao-e-por-que-utilizamos-uma-para-analise-de-dados","text":"Uma das maiores diferen\u00e7as n\u00e3o diz respeito ao lado t\u00e9cnico. Analisar dados em Python ou em R \u00e9 gr\u00e1tis! Isso mesmo, voc\u00ea n\u00e3o precisa gastar um centavo para ter acesso a bibliotecas de an\u00e1lise de dados desenvolvidas pelo Google, Amazon, Projeto Apache, entre outras tantas. Al\u00e9m disso, ao contr\u00e1rio do Excel, do Stata e do SPSS, o R lhe d\u00e1 liberdade para resolver problemas mediante algor\u00edtmos . Ou seja, se voc\u00ea \u00e9 capaz de descrever um passo-a-passo, uma receita, de como obter um resultado a partir de determinadas entradas, podemos escrever um programa e deixar que o computador fa\u00e7a o resto.","title":"O que \u00e9 uma linguagem de programa\u00e7\u00e3o e por que utilizamos uma para an\u00e1lise de dados?"},{"location":"01_introducao/","text":"Introdu\u00e7\u00e3o ao R \u00b6 Leituras recomendadas \u00b6 Leituras Recomendadas Cap\u00edtulos 1, 2 e 3 (Parte 1) . Grolemund, Garret. Hands-On Programming with R - Livro Cap\u00edtulo 5 (Parte 2) . Grolemund, Garret. Hands-On Programming with R - Livro Cap\u00edtulos 2, 3 e 4 . Aquino, Jakson. R para Cientistas Sociais - Livro 1. O que \u00e9 o R e o RStudio? \u00b6 1.1. Linguagem de programa\u00e7\u00e3o R \u00b6 O R \u00e9 uma linguagem de programa\u00e7\u00e3o que vem crescendo bastante nos \u00faltimos anos. Apesar de inicialmente ter como p\u00fablico estat\u00edsticos, a linguagem \u00e9 uma das mais utilizadas para an\u00e1lise de dados nas mais diferentes frentes. A flexibilidade trazido por uma in\u00famera quantidade de pacotes permite lidar n\u00e3o s\u00f3 com tabelas estilo Excel, mas tamb\u00e9m com texto, imagens, etc. Quando baixamos o R pela primeira vez nos assustamos com a sua interface, pois ela n\u00e3o \u00e9 das mais agrad\u00e1veis. 1.1. RStudio \u00b6 Para solucionar isto e adicionar outras funcionalidades que melhoram a experi\u00eancia de quem utiliza a linguagem, foi desenvolvido uma IDE (Ambiente de desenvolvimento integrado) chamada RStudio . O RStudio nada mais \u00e9 que um software , que integrado com o R, permite uma intera\u00e7\u00e3o melhor com os objetos e rotinas criados com o R. O programa tem quatro pain\u00e9is/se\u00e7\u00f5es: A - Console : Local na qual temos o R prompt e que podemos executar linha por linha (chamados de inputs ). Al\u00e9m disso, \u00e9 o local no qual os resultados (chamados de outputs ) ir\u00e3o aparecer. B - File/Plots/Help : Nesta se\u00e7\u00e3o podemos ter acesso \u00e0s pastas que estamos utilizando durante as nossas rotinas no software , al\u00e9m de visualizar os gr\u00e1ficos gerados a partir das an\u00e1lises e verificar a documenta\u00e7\u00e3o de fun\u00e7\u00f5es e pacotes, que explicaremos em breve. C - Workspace : Os valores gerados no R, como por exemplo, vari\u00e1veis e tabelas que voc\u00ea definiu ir\u00e3o aparecer aqui, sobretudo, na aba Environment. E o hist\u00f3rico de c\u00f3digos rodados na aba History. Veremos nas pr\u00f3ximas aulas que a aba Connections \u00e9 \u00fatil caso estejamos conectados com alguma base de dados externa, como por exemplo, Access ou PostgreSQL. D - Editor : Aqui \u00e9 onde os scripts s\u00e3o escritos. Scripts nada mais s\u00e3o do que uma s\u00e9rie de comandos salvos em um arquivo. Eles s\u00e3o \u00fateis para mantermos a reprodutividade do c\u00f3digo, portanto, sempre que formos utilizar o RStudio \u00e9 recomendado escrever um script. Podemos ent\u00e3o come\u00e7ar a escrever nossas primeiras linhas de c\u00f3digo! 1.3. Abrindo um script \u00b6 1- \u00c9 poss\u00edvel um novo script. 2 - Ou podemos abrir um script que j\u00e1 foi trabalhado File \u2192 Open file \u2192 Aula1.R Aten\u00e7\u00e3o \u00e0 extens\u00e3o .R Num script tem linhas de comando e tamb\u00e9m linhas de coment\u00e1rios. Para marcarmos coment\u00e1rios basta colocarmos # . Dessa forma, o R n\u00e3o executar\u00e1 o que est\u00e1 escrito depois das aspas 1.4. Algumas regras de boa conduta \u00b6 N\u00e3o escreva diretamente no console. Salve o seu c\u00f3digo sempre em um script. Assim conseguimos ter acesso a todas as decis\u00f5es tomadas durante uma an\u00e1lise e permitir com que uma outra pessoa tamb\u00e9m chegue nos resultados que obtivermos. Nunca sobreponha o banco de dados. Uma vez que voc\u00ea tem um script , n\u00e3o \u00e9 preciso salvar as altera\u00e7\u00f5es j\u00e1 que voc\u00ea ser\u00e1 capaz de reproduzir os resultados no futuro. Comente o seu c\u00f3digo com # . Lembre-se que outras pessoas ir\u00e3o ler o seu c\u00f3digo e que elas n\u00e3o fazem ideia do que passava na sua cabe\u00e7a quando voc\u00ea tomou algumas decis\u00f5es. Al\u00e9m disso, o seu eu do futuro ir\u00e1 agradecer um c\u00f3digo bem documentado caso seja necess\u00e1rio revisit\u00e1-lo. 2. Nossas primeiras linhas de c\u00f3digo \u00b6 Uma das funcionalidades mais b\u00e1sicas do R \u00e9 realiza\u00e7\u00e3o de opera\u00e7\u00f5es matem\u00e1ticas. Se estamos digitando os comandos em um script , basta colocarmos o cursor do mouse na linha do c\u00f3digo e apertar Ctrl + Enter e o resultado sair\u00e1 no Console, assim como j\u00e1 hav\u00edamos mencionado. 3 + 1 # Soma 3 - 2 # Subtra\u00e7\u00e3o 4 * 2 # Multiplica\u00e7\u00e3o 5 / 2 # Divis\u00e3o 2.1. Objetos e atribui\u00e7\u00f5es I \u00b6 \u201cTo understand computations in R, two slogans are helpful: \u2022 Everything that exists is an object. \u2022 Everything that happens is a function call.\u201d \u2014 John Chambers Dados s\u00e3o guardados dentro de objetos. Objetos possuem diferentes formas de estruturas os dados: Vetores Listas DataFrames Objetos podem conter diferentes tipos de dados: N\u00fameros Strings Fatores 2.2. Atribuindo valores \u00e0 vari\u00e1veis ( <- ) \u00b6 Quando fizemos as opera\u00e7\u00f5es matem\u00e1ticas, n\u00e3o salvamos os nossos resultados. Logo, caso quis\u00e9ssemos acessar novamente, por exemplo, o resultado de 3 + 1 , seria necess\u00e1rio digitar novamente 3 + 1 e efetuar a opera\u00e7\u00e3o. Contudo, \u00e9 poss\u00edvel salvar os resultados em vari\u00e1veis e, ao fazer refer\u00eancia a essas vari\u00e1veis, obter outro resultado. 3 + 1 a <- 3 + 1 a * 2 b <- ( \"Hello, world\" ) b dado <- c ( 1 , 2 , 3 , 4 , 5 , 6 ) dado 2.3. Tipos de dados \u00b6 Tipos de Dados no R (Fonte: https://www.wikitechy.com ) 2.3.1. Lidando com n\u00fameros \u00b6 De certa maneira, estamos muito acostumados com esse tipo de dados. Voc\u00ea consegue pensar em algum exemplo? Os minutos passados entre o momento que voc\u00ea saiu de casa e chegou nesta sala de aula. Renda mensal da sua fam\u00edlia. Quantidade de livros que voc\u00ea possui. Tipos num\u00e9ricos podem ser divididos em inteiros ( integers ) e reais ( float ). Diferentemente de outras linguagens de programa\u00e7\u00e3o, voc\u00ea dificilmente ter\u00e1 que se preocupar com isso no R. 3 # numero inteiro 55 . 4 # numero real 2.3.2. Lidando com texto \u00b6 Outro tipo de vari\u00e1vel muito conhecida \u00e9 o texto ou string . Para declaramos um texto no R podemos utilizar aspas simples ( '' ) ou aspas duplas ( \"\" ), mas lembre-se n\u00e3o podemos intercalar as aspas, como por exemplo, ' ol\u00e1 mundo \" . Se come\u00e7ar um texto com aspas simples termine com aspas simples. \"Vargas\" 'J\u00e2nio Quadros' \"1945\" Perceba que devido ao fato de 1945 estar entre aspas, ele n\u00e3o \u00e9 mais um dado do tipo n\u00famero, mas sim texto e sim isso \u00e9 totalmente diferente de escrever apenas 1945 . 2.3.3. Lidando com fatores \u00b6 Vamos supor que estamos trabalhando com dados de survey e em uma das quest\u00f5es temos a escala likert , em que as respostas v\u00e3o do \u201cDiscordo totalmente\u201d at\u00e9 o \u201cConcordo totalmente\u201d contabilizando um total de 6 categorias de resposta. Ocorre que para que o R entenda este tipo de dado como algo categ\u00f3rico, precisamos transform\u00e1-los em fatores ( factors ). Para fazer essa transforma\u00e7\u00e3o, utilizaremos uma fun\u00e7\u00e3o chamada factor () que recebe como par\u00e2metro um vetor com o que queremos transformar em categorias. factor ( c ( \"Discordo totalmente\" , \"Discordo parcialmente\" , \"Indiferente\" , \"Concordo parcialmente\" , \"Concordo totalmente\" )) Diferente de quando executamos um dado tipo texto, os dados categ\u00f3ricos apresentam os n\u00edveis das categorias ( levels ). Perceba que as nossas categorias n\u00e3o est\u00e3o de acordo com o que a escala likert pressup\u00f5e e para arrumar este problema, precisamos definir os n\u00edveis atrav\u00e9s de um outro par\u00e2metro da fun\u00e7\u00e3o factor () chamado levels = . factor ( c ( \"Discordo totalmente\" , \"Discordo parcialmente\" , \"Indiferente\" , \"Concordo parcialmente\" , \"Concordo totalmente\" ), levels = c ( \"Discordo totalmente\" , \"Discordo parcialmente\" , \"Indiferente\" , \"Concordo parcialmente\" , \"Concordo totalmente\" )) Pode parecer um pouco confuso agora, mas iremos esclarecer estes pontos nos pr\u00f3ximos t\u00f3picos. 2.3.4. Lidando com data e tempo \u00b6 Muitas vezes precisamos lidar com data, como por exemplo, filtrar nossa an\u00e1lise em um intervalo de tempo. Por\u00e9m, n\u00fameros e textos n\u00e3o s\u00e3o suficientes para entender as regras impostas pelas datas, como por exemplo, \u201c01/01/2019\u201d \u00e9 mais recente que \u201c31/12/2018\u201d. Sys . Date () Parece uma vari\u00e1vel texto, n\u00e3o? Por\u00e9m se aplicarmos a fun\u00e7\u00e3o str () , que serve para vermos qual \u00e9 o tipo do dado veremos que na verdade temos uma vari\u00e1vel do tipo Date . Nem sempre teremos que nos preocupar com isso, mas caso voc\u00ea esteja querendo plotar uma s\u00e9rie temporal essa transforma\u00e7\u00e3o \u00e9 bem importante. str ( Sys . Date ()) Caso voc\u00ea tenha ficado curiosa, por baixo a vari\u00e1vel Date \u00e9 do tipo num\u00e9rico e, por conven\u00e7\u00e3o, nada mais \u00e9 do que a quantidade de segundos passados desde 1 de Janeiro de 1970. 2.3.5. Lidando com l\u00f3gicos/booleanos \u00b6 Valores booleanos s\u00e3o resultados de opera\u00e7\u00f5es booleanas e podem ser definidos como verdadeiros ou falsos . Por conven\u00e7\u00e3o, trabalhamos com os termos em ingl\u00eas. Portanto, TRUE ou FALSE . Por opera\u00e7\u00f5es booleanas, podemos pensar em diferentes testes que tenham necessariamente uma resposta ou verdadeira ou falsa. Por exemplo, 3 \u00e9 maior do que 1? Verdadeiro! E 3 \u00e9 menor do que 2? Falso! Vamos realizar essas duas opera\u00e7\u00f5es no R. # 3 \u00e9 maior do que 1 ? 3 > 1 # 3 \u00e9 maior do que 1 ? 3 < 2 Existem, obviamente, outras opera\u00e7\u00f5es. \u00c9 poss\u00edvel tamb\u00e9m testar a igualdade entre dois valores com == . # 2 \u00e9 igual a 2 ? 2 == 2 Tamb\u00e9m podemos testar se dois valores s\u00e3o diferentes. # 120 \u00e9 diferente de 20 ? 120 != 20 Outras varia\u00e7\u00f5es utilizadas s\u00e3o o maior ou igual ( >= ) e o menor ou igual ( <= ). Al\u00e9m disso, tamb\u00e9m \u00e9 poss\u00edvel realizar essas opera\u00e7\u00f5es com textos. # \"FFLCH\" \u00e9 igual a \"ICB\" ? \"FFLCH\" == \"ICB\" N\u00e3o iremos introduzir essa ideia aqui, mas caso seja de interesse tamb\u00e9m podemos utilizar as no\u00e7\u00f5es de maior e menor para textos. Voc\u00ea teria um palpite de como um texto pode ser maior do que outro? 2.3.6. Valores ausentes/ missings \u00b6 O que s\u00e3o missings e por que existe um valor especial para eles? Existem dois tipos de valores missing, o NA ( not available ) e o NaN ( not a number ), ambos tem sentidos semelhantes, por\u00e9m o primeiro \u00e9 mais gen\u00e9rico para cada tipo de dado. Para sabermos se um certo dado \u00e9 missing, utilizamos a fun\u00e7\u00e3o is . na () . is . na ( NA ) is . na ( 99 ) Por que esse c\u00f3digo retorna NA ? NA == NA 3. Exerc\u00edcios - Parte 1 \u00b6 3.1. Tipos de Dados \u00b6 Marque verdadeiro ou falso. Caso verdadeiro, informe o tipo de dado: Obs: Caso apare\u00e7a \u201c+\u201d no seu console ao testar as afirma\u00e7\u00f5es, basta apertar \u201cEsc\u201d 33 , 5 \"Ol\u00e1 mundo\" \"O 'R' \u00e9 uma linguagem legal\" \"O 'R \u00e9 uma linguagem legal\" \" O 'R \u00e9 uma linguagem legal' 400 e + 10 factor ( \"oi\" , levels = c ( \"oi\" , \"tchau\" )) TRUE FALSE 4. Estrutura de dados \u00b6 As estruturas de dados s\u00e3o maneiras de organizar e guardar dados dentro da linguagem para que possamos trabalhar de forma mais eficiente. No nosso cotidiano utilizaremos tr\u00eas destas estruturas: vetores , listas e dataframes . Essas tr\u00eas estruturas podem ser dividas entre homog\u00eaneas e heterog\u00eaneas. Mas o que isso significa? Basicamente diz respeito a quantidade de tipos de dados que ela pode receber, isto \u00e9, estruturas homog\u00eaneas s\u00f3 podem receber um tipo de dado, enquanto as estruturas heterog\u00eaneas podem receber mais de um tipo de dado. 4.1. Vetores (at\u00f4micos) \u00b6 Um vetor at\u00f4mico \u00e9 a estrutura mais b\u00e1sica no R; \u00e9 um vetor de dados homog\u00eaneo com apenas uma dimens\u00e3o. Imagine o vetor como um tr\u00eas em que os valores est\u00e3o ordenados em posi\u00e7\u00f5es (primeiro, segundo, terceiro) e que todos os valores contidos por ele precisam ser do mesmo tipo. Ilustra\u00e7\u00e3o de um trem Que tal um exemplo? Imagine que voc\u00ea queira organizar em um vetor a quantidade de pessoas dentro de vag\u00f5es de um trem. Nesse sentido, a quantidade de pessoas no primeira vag\u00e3o \u00e9 seguida da quantidade de pessoas no segundo e assim por diante. c ( 120 , 29 , 191 , 18 , 39 ) Quantas pessoas est\u00e3o no segundo vag\u00e3o? 29? Acertou! Perceba ent\u00e3o que para construir um vetor basta colocarmos os valores dentro de c () . 4.1.1. Indexando vetores \u00b6 Dado que criamos objetos, podemos acessar os valores espec\u00edficos a partir da posi\u00e7\u00e3o dentro do vetor. No exemplo anterior, voc\u00ea poderia ter pedido para o R lhe responder quem est\u00e1 na segunda posi\u00e7\u00e3o. Como fazer isso? basta salvar o vetor em uma vari\u00e1vel e color [ 2 ] trem <- c ( 120 , 29 , 191 , 18 , 39 ) trem[1] Para indexarmos mais de um elemento podemos indexar de duas formas. Logo se quis\u00e9ssemos o n\u00famero de pessoas no terceiro e quarto vag\u00e3o: trem [ c ( 3 , 4 )] trem [ 3 : 4 ] O que acontece se voc\u00ea utilizar [ 3 : 5 ] ? trem [ 3 : 5 ] 4.2. Listas \u00b6 Em geral, dificilmente utilizamos as listas de maneira pura. Contudo, entender o funcionamento dela \u00e9 essencial para pegar os fundamentos de uma outra estrutura de dados. Vamos montar um guarda-roupa com tr\u00eas gavetas: Primeira gaveta: 3 meias Segunda gaveta: 5 camisetas com logotipo que vai de 1 at\u00e9 5 Terceira gaveta: uma caixa com dois rel\u00f3gios Uma forma de representar este guarda-roupa \u00e9 por meio de uma lista! lista <- list ( c ( \"Meia 1\" , \"Meia 2\" , \" Meia 3\" ), c ( 1 , 2 , 3 , 4 , 5 ), list ( c ( \"Relogio 1\" , \"Relogio 2\" ))) Listas s\u00e3o parecidas com vetores at\u00f4micos, por\u00e9m elas podem conter vetores de qualquer tipo (num\u00e9ricos, l\u00f3gicos, texto) e at\u00e9 mesmo outras listas. 4.2.1. Indexando \u00b6 Apesar de parecido com um vetor at\u00f4mico, a indexa\u00e7\u00e3o tem alguns aspectos diferentes! Quando indexamos um vetor, obtemos o elemento a partir de [] em que dentro colocamos a posi\u00e7\u00e3o de interesse, por\u00e9m, se fizermos o mesmo com a lista \u00e9 como se abr\u00edssemos apenas a gaveta, mas n\u00e3o acessamos o que est\u00e1 dentro dela. Ou seja, para acessar o elemento da lista precisamos utilizar [[]] . lista [ 1 ] # Obtendo a posicao da lista lista [[ 1 ]] # Obtendo os elementos da lista lista [[ 1 ]][ 1 ] lista [[ 3 ]][[ 1 ]] # Obtendo o elemento da lista dentro de outra lista 4.3. Dataframes \u00b6 Se voc\u00ea j\u00e1 utilizou uma planilha de Excel o DataFrame n\u00e3o possui quase nada de diferente. Assim como as listas, data frames s\u00e3o estruturas de dados heterog\u00eaneas. Voc\u00ea saberia dizer por que? tabela <- data.frame ( ano = c ( 2014 , 2014 , 2015 , 2015 , 2016 , 2016 ), pais = c ( 'Brasil' , 'China' , 'Brasil' , 'China' , 'Brasil' , 'China' ), pib = c ( 100 , 130 , 110 , 140 , 160 , 170 ), pop = c ( 3 , 8 , 4 , 9 , 6 , 14 )) tabela Diferentemente do Excel, n\u00e3o podemos selecionar uma c\u00e9lula e alterar um dado. No R, para manipular e visualizar uma tabela precisamos utilizar fun\u00e7\u00f5es. N\u00e3o se estresse caso nunca tenho ouvido falar delas. Pense apenas que elas realizam alguma a\u00e7\u00e3o . Repare nos resultados das fun\u00e7\u00f5es a seguir: View ( tabela ) # mostra o banco no console head ( tabela ) # mostra as seis primeiras linhas do banco no console str ( tabela ) # mostra a estrutura da tabela names ( tabela ) # mostra o nome das vari \u00e1 veis nrow ( tabela ) # n \u00ba de linhas ncol ( tabela ) # n \u00ba de colunas dim ( tabela ) # dimens \u00f5 es 4.3.1. Indexando \u00b6 Assim como data frames, a indexa\u00e7\u00e3o tamb\u00e9m tem mais de uma dimens\u00e3o, isto \u00e9, primeiro indexamos a linha e depois a coluna, como por exemplo: tabela [ 1 , 2 ] # Primeira linha , segunda coluna tabela [ 1 ,] # Primeira linha , todas as colunas tabela [, 1 ] # Todas as linhas , primeira coluna tabela [ 1 : 3 ,] # Linhas de 1 at\u00e9 3 , todas as colunas tabela [, 2 : 4 ] # todas as linhas , colunas de 2 at\u00e9 4 Como estamos lidando com tabelas tamb\u00e9m podemos indexar com o nome das colunas tabela [, \"pais\" ] tabela [ 2 , \"pais\" ] Por fim tamb\u00e9m podemos indexar utilizando o operador $ seguido do nome da coluna. tabela$pib tabela$pib [ 1 ] 4.3.2. Importando dataframes (csv, Excel, etc.) \u00b6 Uma das maneiras mais eficientes de se importar dados para o R \u00e9 pelo uso dos seguintes pacotes: readr para a leitura de CSVs. readxl para a leitura de planilhas de Excel. haven para a leitura de arquivos. Instalando pacotes do R O R n\u00e3o possui todos os pacotes previamente. Em geral, utilizaremos o comando install . packages () para instalar pacotes no R. Execute o comando install . packages ( c ( 'readr' , 'readxl' , 'haven' )) . Lembre-se de carregar o pacote no R com o comando library () . Por exemplo, library ( readr ) . Voc\u00ea sabia que o TSE (Tribunal Superior Eleitoral) libera diversos dados sobre as elei\u00e7\u00f5es no site deles? Que tal tentar baixar o banco de candidatos? Para isso, baixe os arquivos: Candidatos - CSV Candidatos - CSV2 Candidatos - TAB Candidatos - Arroba Candidatos - Excel Candidatos - Stata \u00c0s vezes, o navegador n\u00e3o ir\u00e1 fazer o download automaticamente e lhe mostrar\u00e1 uma tela repleta de caracteres. Calma! Clique com o bot\u00e3o direito na tela e selecione a op\u00e7\u00e3o Save Page As\u2026 . Recomendamos que voc\u00ea salve os dados dentro de uma pasta chamada data ou dados para manter o projeto organizado. Para importar um CSV para o R, utilize a fun\u00e7\u00e3o read_csv () do pacote readr . Fique atento com o lugar que voc\u00ea salvou os arquivos! Neste exemplo, os arquivos est\u00e3o salvos dentro da pasta data . library ( readr ) banco_virgula <- read_csv ( 'data/candidatos_sp_virgula.csv' ) Se tudo tiver dado certo, agora voc\u00ea ter\u00e1 um banco_virgula no seu ambiente de vari\u00e1veis. Mas nem sempre um banco de dados \u00e9 separado por v\u00edrgula e mesmo assim ele pode ter a extens\u00e3o .csv . Bancos separados por ponto e v\u00edrgula ; . banco_pontovirgula <- read_csv2 ( 'data/candidatos_sp_pontovirgula.csv' ) Banco separados por tabs \\ t . banco_tab <- read_tsv ( 'data/candidatos_sp_tab.csv' ) Banco separados por @ ou qualquer outro caractere . banco_arroba <- read_delim ( 'data/candidatos_sp_arroba.csv' , delim = '@' ) Banco Excel. library ( readxl ) banco_excel <- read_excel ( 'data/candidatos_sp_excel.xlsx' ) Repare que o n\u00famero de linhas do banco Excel \u00e9 menor! Por que isso aconteceu? Banco Excel - Abas library ( readxl ) banco_excel_1 <- read_excel ( 'data/candidatos_sp_excel.xlsx' , sheet = 1 ) banco_excel_1 <- read_excel ( 'data/candidatos_sp_excel.xlsx' , sheet = 2 ) Banco Stata library ( haven ) banco_stata <- read_stata ( 'data/candidatos_sp_stata.dta' ) 5. Exerc\u00edcio - Parte 2 \u00b6 5.1. DataFrames \u00b6 Crie um dataframe com o nome, idade e filme preferido dos seus colegas de turma. Como criar um dataframe? Lembre-se que para criar um dataframe utilizamos a fun\u00e7\u00e3o data . frame () e que essa fun\u00e7\u00e3o recebe vetores como par\u00e2metros para cada coluna que desejamos criar. Por exemplo, se voc\u00ea quiser criar uma dataframe com uma lista de n\u00fameros basta executar data . frame ( lista_numeros = c ( 1 , 2 , 3 , 4 , 5 , 6 , 7 )) Crie uma lista composta por 3 elementos. Fa\u00e7a um script que documente o passo a passo da cria\u00e7\u00e3o do dataframe. Como podemos saber o conte\u00fado do segundo elemento da lista? Utilze a indexa\u00e7\u00e3o . No R temos, bancos para fins did\u00e1ticos. Para utiliz\u00e1-los basta usar a fun\u00e7\u00e3o data. Para esse exerc\u00edcios utilizaremos o banco mtcars. Execute data ( mtcars ) . Repare que agora voc\u00ea pode acessar o banco mtcars da mesma maneira que fizemos anteriormente com outros dataframes. Visualize o banco. Do que se trata? Quais s\u00e3o suas vari\u00e1veis? E suas dimens\u00f5es? Selecione as 10 primeiras observa\u00e7\u00f5es 5. Fun\u00e7\u00f5es \u00b6 Como voc\u00ea deve ter notado mencionamos algumas vezes a palavra fun\u00e7\u00e3o durante o texto. Mas o que \u00e9 isso? Podemos pensar cada fun\u00e7\u00e3o como uma a\u00e7\u00e3o . Por exemplo, imagine voc\u00ea possa controlar a sua vida por meio de fun\u00e7\u00f5es . Se as coisas funcionam assim, provavelmente ter\u00edamos uma fun\u00e7\u00e3o levantar () , beber_aguar () e assim por diante. No R, o princ\u00edpio \u00e9 o mesmo e precisamos utilizar fun\u00e7\u00f5es para executar quaisquer comandos que precisamos que sejam operados. Por exemplo, quando voc\u00ea executou read_csv () , voc\u00ea chamou um c\u00f3digo que abre o arquivo especificado e estrutura cada linha dentro de um dataframe. Mas como uma fun\u00e7\u00e3o sabe sobre onde ela precisa operar? Como read_csv () sabia que precisava abrir aquele arquivo? Para isso, utilizamos par\u00e2metros . Par\u00e2metros alteram o comportamento das nossas fun\u00e7\u00f5es e nos permitem especificar, por exemplo, um arquivo para a read_csv () escrevendo read_csv ( 'arquivo.csv' ) . Vamos ver isso na pr\u00e1tica com outra fun\u00e7\u00e3o bastante importante, a mean () . Como aprender a utilizar fun\u00e7\u00f5es? Obviamente, voc\u00ea pode utilizar o Google, mas muitas vezes n\u00e3o \u00e9 necess\u00e1rio sair do RStudio. Se voc\u00ea quiser, utilize o comando ? mean e tente ler a documenta\u00e7\u00e3o e os exemplos. Pacotes instalados pelo CRAN necessariamente s\u00e3o acompanhados por uma documenta\u00e7\u00e3o que explica o que as suas fun\u00e7\u00f5es fazem. Vamos tentar rodar um exemplo? x <- c ( 1 , 2 , 3 ) xm <- mean ( x ) xm A fun\u00e7\u00e3o mean () calcula a m\u00e9dia de qualquer vetor num\u00e9rico para a gente e podemos utilizar para ter uma no\u00e7\u00e3o dos nossos dados durante uma an\u00e1lise. 5.1. Pacotes \u00b6 Segundo a defini\u00e7\u00e3o do livro R Packages, escrito por Hadley Wickham, um pacote \u00e9 uma unidade fundamental de compartilhamento de c\u00f3digos, dados, documenta\u00e7\u00e3o e testes. Em outras palavras, os pacotes s\u00e3o cole\u00e7\u00f5es de c\u00f3digos (fun\u00e7\u00f5es) e dados desenvolvidos pela comunidade. Estes pacotes ficam localizados no que chamamos de reposit\u00f3rio. O principal reposit\u00f3rio recebe o nome de C**omprehensive **R **A**rchive **N**etwork, o tamb\u00e9m chamado, CRAN. Mas existem outros tamb\u00e9m, como o Github, no qual a forma de obter os pacotes muda. Para instalar um pacote, utilize o comando install . packages () em que o argumento principal \u00e9 o nome do pacote que queremos instalar. Uma peculiaridade desta fun\u00e7\u00e3o \u00e9 que por padr\u00e3o ela instala os pacotes que est\u00e3o no CRAN, como por exemplo, vamos instalar um pacote chamado \u201cdplyr\u201d install . packages ( \"dplyr\" ) Ap\u00f3s instalarmos o pacote, devemos habilit\u00e1-lo com uma fun\u00e7\u00e3o chamada library () library ( dplyr ) Caso o pacote n\u00e3o esteja no CRAN, mas sim no Github, devemos instalar o pacote com o auxilio de uma fun\u00e7\u00e3o chamada install_github () do pacote devtools . install . packages ( \"devtools\" ) library ( devtools ) Pacotes no GitHub Caso o seu pacote n\u00e3o esteja liberado no CRAN ou caso deseje ter acesso \u00e0 vers\u00e3o de desenvolvimento, voc\u00ea ir\u00e1 precisar utilizar a fun\u00e7\u00e3o install_github () do pacote devtools que recebe como par\u00e2metro < dono - do - pacote >/< nome - do - pacote > . Por exemplo, install_github ( \"abjur/abjutils\" ) . N\u00e3o se esque\u00e7a de habilitar o devtools com a fun\u00e7\u00e3o library ( devtools ) . 6. Controladores de Fluxo \u00b6 \u00c9 muito comum estabelecermos uma condi\u00e7\u00e3o para tomar uma decis\u00e3o, como por exemplo, \u2018Porcentagem de votos maior que 50% pode significar vit\u00f3ria, caso contr\u00e1rio, derrota\u2019. Para que possamos fazer isso, utilizaremos o if / else e o for ! 6.1. if/else \u00b6 A estrutura do if/else \u00e9 a seguinte: if ( < condicao > ) { < comando1 > < comando2 > < etc > } else { < comando3 > < comando4 > < etc > } Podemos interpret\u00e1-la da seguinte maneira: Se a condi\u00e7\u00e3o for verdadeira, execute os comandos 1 e 2, caso contr\u00e1rio, execute os comandos 3 e 4. 6.2. for \u00b6 for ( i in x ) { < comando1 > < comando2 > } N\u00f3s lemos o for acima da seguinte maneira: Para cada valor \u201ci\u201d presente na sequ\u00eancia \u201cx\u201d, realize tais comandos. Ou seja, para cada linha da nossa tabela, some um ao percentual de votos recebidos. Vamos criar o seguinte dataframe : ano : ano da observa\u00e7\u00e3o. pais : pa\u00eds da observa\u00e7\u00e3o. pip : Produto Interno Bruto do pa\u00eds. pop : Popula\u00e7\u00e3o do pa\u00eds. tabela <- data.frame ( ano = c ( 2014 , 2014 , 2015 , 2015 , 2016 , 2016 ), pais = c ( 'Brasil' , 'China' , 'Brasil' , 'China' , 'Brasil' , 'China' ), pib = c ( 100 , 130 , 110 , 140 , 160 , 170 ), pop = c ( 3 , 8 , 4 , 9 , 6 , 14 )) Nosso objetivo: Criar uma terceira coluna com o PIB per capta com um for for ( i in 1 : nrow ( tabela )) { print ( tabela $ pib [ i ] ) } Vamos entender algumas coisas aqui, nrow ( tabela ) \u00e9 uma fun\u00e7\u00e3o que retorna o n\u00famero de linhas de uma tabela, ou seja, seu resultado \u00e9 um n\u00famero. Quando temos 1 : nrow ( tabela ) , estamos criando um vetor com uma sequ\u00eancia de 1 at\u00e9 o n\u00famero de linhas da nossa tabela, no caso, 6. Isso significa que nosso for vai percorrer as treze linhas da tabela. Uma vez que o i assumir\u00e1 os valores de 1 at\u00e9 6, podemos indexar o vetor tabela $ pip [ i ] com o [ i ] para obter o n\u00famero do PIB correspondente a linha i . Dessa maneira podemos dividir tabela $ pip [ i ] pela tabela $ pop [ i ] e obter a _renda per capta. Vamos agora voltar ao nosso objetivo principal: tabela $ pib_capta <- NA # Criando uma coluna vazia for ( i in 1 : nrow ( tabela )) { tabela $ pib_capta [ i ] <- tabela $ pib [ i ] / tabela $ pop [ i ] } print ( tabela ) Por fim, n\u00f3s podemos misturar o for com o if para obter um comportamento customiz\u00e1vel dentro do nosso loop . Por exemplo, vamos criar uma classifica\u00e7\u00e3o de PIB per capta entre alto e baixo. Para isso, iremos utilizar o 20 como o discriminador entre essas duas classes. Nesse sentido, se pib_capta for maior do que 20 devemos classificar tabela $ pip_capta_class <- NA # Criando uma coluna vazia for ( i in 1 : nrow ( tabela )) { if ( tabela $ pib_capta [ i ] > 20 ) { tabela $ pip_capta_class [ i ] <- ' Alto ' } else { tabela $ pip_capta_class [ i ] <- ' Baixo ' } } print ( tabela ) PARAB\u00c9NS!!! Enfim, ap\u00f3s esse breve resumos de conceitos b\u00e1sicos de programa\u00e7\u00e3o voc\u00ea ser\u00e1 capaz de interagir com pacotes com uma vasta variedade de pacotes, al\u00e9m de conseguir desenvolver as pr\u00f3prias solu\u00e7\u00f5es quando for necess\u00e1rio. 7. Exerc\u00edcios \u00b6 Exerc\u00edcio 1 - Tipos de dados \u00b6 Execute os c\u00f3digos abaixo e verifique se s\u00e3o dados v\u00e1lidos em R. Caso verdadeiro, informe o tipo de dado: Obs: Caso apare\u00e7a \u201c+\u201d no seu console ao testar as afirma\u00e7\u00f5es, basta apertar \u201cEsc\u201d 33 , 5 \"Ol\u00e1 mundo\" \"O 'R' \u00e9 uma linguagem legal\" \"O 'R \u00e9 uma linguagem legal\" \" O 'R \u00e9 uma linguagem legal' 400 e + 10 factor ( \"oi\" , levels = c ( \"oi\" , \"tchau\" )) true False Exerc\u00edcio 2 - Manipulando vari\u00e1veis \u00b6 Altere o valor de v_numero para 42 v_numero <- 42.5 Altere o valor de v_caractere para \u201cuniverso\u201d. v_caractere <- \"algum texto\" ` Altere o valor de v_logical para FALSE `v_logical <- TRUE` Exerc\u00edcio 3 - Estruturas de Dados \u00b6 Crie dois vetores: O primeiro ( nome ) deve conter o nome de pelo menos 5 colegas que est\u00e3o sentandos ao seu redor. O segundo ( altura ) deve conter a altura desses colegas. vetor_nome <- c () vetor_altura <- c () Acesse o primeiro nome do vetor_nome . Lembre-se que voc\u00ea precisa dos [] . Acesse os primeiros tr\u00eas valores de altura no vetor_altura . Fa\u00e7a isso apenas utilizando [] e : Fa\u00e7a isso apenas utilizando [] e c () Crie um dataframe a partir de vetor_nome e vetor_altura . tabela_colegas <- data.frame ( nome = < completar > , altura = < completar > ) Usando a indexa\u00e7\u00e3o , obtenha: O vetor nome dentro do dataframe tabelas_colegas O vetor altura dentro do dataframe tabelas_colegas Obtenha a primeira observa\u00e7\u00e3o da sua tabela (primeira linha) Utilizando fun\u00e7\u00f5es obtenha: A m\u00e9dia de altura dos seus colegas Uma tabela ( table () ) dos nomes dos seus colegas O desvio padr\u00e3o da altura ( sd () ) Exerc\u00edcio 4 - Controladores de Fluxo \u00b6 Imprima todas as alturas de tabelas_colegas com for e print () . Crie uma classifica\u00e7\u00e3o para a altura dos seus colegas com for e if . N\u00e3o se preocupe com o valor utilizado. Contudo, case deseje, voc\u00ea pode dividi-los pela mediana ou pela m\u00e9dia . Exerc\u00edcio 5 - Importa\u00e7\u00e3o de Dados \u00b6 Escolha um dos bancos abaixo ou qualquer outro de seu interesse. Baixe o banco, utilize as fun\u00e7\u00f5es para explorar as vari\u00e1veis, retire algum resumo de uma vari\u00e1vel (m\u00e9dia, contagem, etc.). Relembrando as fun\u00e7\u00f5es Voc\u00ea pode utilizar View () , head () , str () , names () , entre outras para ter uma ideia geral do banco de dados. Para extrair estat\u00edsticas, voc\u00ea pode utilizar mean () , sd () , median () , etc. Lembre-se que o Google \u00e9 o seu melhor amigo! Pesquisa outros comandos que sejam do seu interesse! Banco Link Banco Elei\u00e7\u00f5es Download Pre\u00e7o M\u00e9dio de Combust\u00edveis no Brasil Download Banco de Pokemon Download Vagas de Emprego em Nova Iorque Download Exerc\u00edcio 6 - Desafio \u00b6 Com o banco de dados do exerc\u00edcio anterior tente levantar algumas hip\u00f3teses sobre as rela\u00e7\u00f5es de vari\u00e1veis. Por exemplo, \u201ceu acho que X causa Y\u201d. Anote todas essas hip\u00f3teses. Uma vez feito isso, tente: Criar um gr\u00e1fico que ressalte a rela\u00e7\u00e3o entre essas vari\u00e1veis. Procure rodar um teste estat\u00edstico que ponha \u00e0 prova a sua hip\u00f3tese (Teste t, ANOVA, regress\u00e3o linear, regress\u00e3o log\u00edstica, etc.). Por onde come\u00e7ar? Existe um pacote de visualiza\u00e7\u00e3o de dados muito famoso para o R chamado ggplot2 . Quanto ao teste estat\u00edstico, o R possu\u00ed todos os testes citados implementados, ou seja, voc\u00ea n\u00e3o precisa baixar um pacote para aplic\u00e1-los. Tente procurar na internet . Existem refer\u00eancias tanto em portugu\u00eas quanto em ingl\u00eas.","title":"Introdu\u00e7\u00e3o ao R"},{"location":"01_introducao/#introducao-ao-r","text":"","title":"Introdu\u00e7\u00e3o ao R"},{"location":"01_introducao/#leituras-recomendadas","text":"Leituras Recomendadas Cap\u00edtulos 1, 2 e 3 (Parte 1) . Grolemund, Garret. Hands-On Programming with R - Livro Cap\u00edtulo 5 (Parte 2) . Grolemund, Garret. Hands-On Programming with R - Livro Cap\u00edtulos 2, 3 e 4 . Aquino, Jakson. R para Cientistas Sociais - Livro","title":"Leituras recomendadas"},{"location":"01_introducao/#1-o-que-e-o-r-e-o-rstudio","text":"","title":"1. O que \u00e9 o R e o RStudio?"},{"location":"01_introducao/#11-linguagem-de-programacao-r","text":"O R \u00e9 uma linguagem de programa\u00e7\u00e3o que vem crescendo bastante nos \u00faltimos anos. Apesar de inicialmente ter como p\u00fablico estat\u00edsticos, a linguagem \u00e9 uma das mais utilizadas para an\u00e1lise de dados nas mais diferentes frentes. A flexibilidade trazido por uma in\u00famera quantidade de pacotes permite lidar n\u00e3o s\u00f3 com tabelas estilo Excel, mas tamb\u00e9m com texto, imagens, etc. Quando baixamos o R pela primeira vez nos assustamos com a sua interface, pois ela n\u00e3o \u00e9 das mais agrad\u00e1veis.","title":"1.1. Linguagem de programa\u00e7\u00e3o R"},{"location":"01_introducao/#11-rstudio","text":"Para solucionar isto e adicionar outras funcionalidades que melhoram a experi\u00eancia de quem utiliza a linguagem, foi desenvolvido uma IDE (Ambiente de desenvolvimento integrado) chamada RStudio . O RStudio nada mais \u00e9 que um software , que integrado com o R, permite uma intera\u00e7\u00e3o melhor com os objetos e rotinas criados com o R. O programa tem quatro pain\u00e9is/se\u00e7\u00f5es: A - Console : Local na qual temos o R prompt e que podemos executar linha por linha (chamados de inputs ). Al\u00e9m disso, \u00e9 o local no qual os resultados (chamados de outputs ) ir\u00e3o aparecer. B - File/Plots/Help : Nesta se\u00e7\u00e3o podemos ter acesso \u00e0s pastas que estamos utilizando durante as nossas rotinas no software , al\u00e9m de visualizar os gr\u00e1ficos gerados a partir das an\u00e1lises e verificar a documenta\u00e7\u00e3o de fun\u00e7\u00f5es e pacotes, que explicaremos em breve. C - Workspace : Os valores gerados no R, como por exemplo, vari\u00e1veis e tabelas que voc\u00ea definiu ir\u00e3o aparecer aqui, sobretudo, na aba Environment. E o hist\u00f3rico de c\u00f3digos rodados na aba History. Veremos nas pr\u00f3ximas aulas que a aba Connections \u00e9 \u00fatil caso estejamos conectados com alguma base de dados externa, como por exemplo, Access ou PostgreSQL. D - Editor : Aqui \u00e9 onde os scripts s\u00e3o escritos. Scripts nada mais s\u00e3o do que uma s\u00e9rie de comandos salvos em um arquivo. Eles s\u00e3o \u00fateis para mantermos a reprodutividade do c\u00f3digo, portanto, sempre que formos utilizar o RStudio \u00e9 recomendado escrever um script. Podemos ent\u00e3o come\u00e7ar a escrever nossas primeiras linhas de c\u00f3digo!","title":"1.1. RStudio"},{"location":"01_introducao/#13-abrindo-um-script","text":"1- \u00c9 poss\u00edvel um novo script. 2 - Ou podemos abrir um script que j\u00e1 foi trabalhado File \u2192 Open file \u2192 Aula1.R Aten\u00e7\u00e3o \u00e0 extens\u00e3o .R Num script tem linhas de comando e tamb\u00e9m linhas de coment\u00e1rios. Para marcarmos coment\u00e1rios basta colocarmos # . Dessa forma, o R n\u00e3o executar\u00e1 o que est\u00e1 escrito depois das aspas","title":"1.3. Abrindo um script"},{"location":"01_introducao/#14-algumas-regras-de-boa-conduta","text":"N\u00e3o escreva diretamente no console. Salve o seu c\u00f3digo sempre em um script. Assim conseguimos ter acesso a todas as decis\u00f5es tomadas durante uma an\u00e1lise e permitir com que uma outra pessoa tamb\u00e9m chegue nos resultados que obtivermos. Nunca sobreponha o banco de dados. Uma vez que voc\u00ea tem um script , n\u00e3o \u00e9 preciso salvar as altera\u00e7\u00f5es j\u00e1 que voc\u00ea ser\u00e1 capaz de reproduzir os resultados no futuro. Comente o seu c\u00f3digo com # . Lembre-se que outras pessoas ir\u00e3o ler o seu c\u00f3digo e que elas n\u00e3o fazem ideia do que passava na sua cabe\u00e7a quando voc\u00ea tomou algumas decis\u00f5es. Al\u00e9m disso, o seu eu do futuro ir\u00e1 agradecer um c\u00f3digo bem documentado caso seja necess\u00e1rio revisit\u00e1-lo.","title":"1.4. Algumas regras de boa conduta"},{"location":"01_introducao/#2-nossas-primeiras-linhas-de-codigo","text":"Uma das funcionalidades mais b\u00e1sicas do R \u00e9 realiza\u00e7\u00e3o de opera\u00e7\u00f5es matem\u00e1ticas. Se estamos digitando os comandos em um script , basta colocarmos o cursor do mouse na linha do c\u00f3digo e apertar Ctrl + Enter e o resultado sair\u00e1 no Console, assim como j\u00e1 hav\u00edamos mencionado. 3 + 1 # Soma 3 - 2 # Subtra\u00e7\u00e3o 4 * 2 # Multiplica\u00e7\u00e3o 5 / 2 # Divis\u00e3o","title":"2. Nossas primeiras linhas de c\u00f3digo"},{"location":"01_introducao/#21-objetos-e-atribuicoes-i","text":"\u201cTo understand computations in R, two slogans are helpful: \u2022 Everything that exists is an object. \u2022 Everything that happens is a function call.\u201d \u2014 John Chambers Dados s\u00e3o guardados dentro de objetos. Objetos possuem diferentes formas de estruturas os dados: Vetores Listas DataFrames Objetos podem conter diferentes tipos de dados: N\u00fameros Strings Fatores","title":"2.1. Objetos e atribui\u00e7\u00f5es I"},{"location":"01_introducao/#22-atribuindo-valores-a-variaveis-","text":"Quando fizemos as opera\u00e7\u00f5es matem\u00e1ticas, n\u00e3o salvamos os nossos resultados. Logo, caso quis\u00e9ssemos acessar novamente, por exemplo, o resultado de 3 + 1 , seria necess\u00e1rio digitar novamente 3 + 1 e efetuar a opera\u00e7\u00e3o. Contudo, \u00e9 poss\u00edvel salvar os resultados em vari\u00e1veis e, ao fazer refer\u00eancia a essas vari\u00e1veis, obter outro resultado. 3 + 1 a <- 3 + 1 a * 2 b <- ( \"Hello, world\" ) b dado <- c ( 1 , 2 , 3 , 4 , 5 , 6 ) dado","title":"2.2. Atribuindo valores \u00e0 vari\u00e1veis (&lt;-)"},{"location":"01_introducao/#23-tipos-de-dados","text":"Tipos de Dados no R (Fonte: https://www.wikitechy.com )","title":"2.3. Tipos de dados"},{"location":"01_introducao/#231-lidando-com-numeros","text":"De certa maneira, estamos muito acostumados com esse tipo de dados. Voc\u00ea consegue pensar em algum exemplo? Os minutos passados entre o momento que voc\u00ea saiu de casa e chegou nesta sala de aula. Renda mensal da sua fam\u00edlia. Quantidade de livros que voc\u00ea possui. Tipos num\u00e9ricos podem ser divididos em inteiros ( integers ) e reais ( float ). Diferentemente de outras linguagens de programa\u00e7\u00e3o, voc\u00ea dificilmente ter\u00e1 que se preocupar com isso no R. 3 # numero inteiro 55 . 4 # numero real","title":"2.3.1. Lidando com n\u00fameros"},{"location":"01_introducao/#232-lidando-com-texto","text":"Outro tipo de vari\u00e1vel muito conhecida \u00e9 o texto ou string . Para declaramos um texto no R podemos utilizar aspas simples ( '' ) ou aspas duplas ( \"\" ), mas lembre-se n\u00e3o podemos intercalar as aspas, como por exemplo, ' ol\u00e1 mundo \" . Se come\u00e7ar um texto com aspas simples termine com aspas simples. \"Vargas\" 'J\u00e2nio Quadros' \"1945\" Perceba que devido ao fato de 1945 estar entre aspas, ele n\u00e3o \u00e9 mais um dado do tipo n\u00famero, mas sim texto e sim isso \u00e9 totalmente diferente de escrever apenas 1945 .","title":"2.3.2. Lidando com texto"},{"location":"01_introducao/#233-lidando-com-fatores","text":"Vamos supor que estamos trabalhando com dados de survey e em uma das quest\u00f5es temos a escala likert , em que as respostas v\u00e3o do \u201cDiscordo totalmente\u201d at\u00e9 o \u201cConcordo totalmente\u201d contabilizando um total de 6 categorias de resposta. Ocorre que para que o R entenda este tipo de dado como algo categ\u00f3rico, precisamos transform\u00e1-los em fatores ( factors ). Para fazer essa transforma\u00e7\u00e3o, utilizaremos uma fun\u00e7\u00e3o chamada factor () que recebe como par\u00e2metro um vetor com o que queremos transformar em categorias. factor ( c ( \"Discordo totalmente\" , \"Discordo parcialmente\" , \"Indiferente\" , \"Concordo parcialmente\" , \"Concordo totalmente\" )) Diferente de quando executamos um dado tipo texto, os dados categ\u00f3ricos apresentam os n\u00edveis das categorias ( levels ). Perceba que as nossas categorias n\u00e3o est\u00e3o de acordo com o que a escala likert pressup\u00f5e e para arrumar este problema, precisamos definir os n\u00edveis atrav\u00e9s de um outro par\u00e2metro da fun\u00e7\u00e3o factor () chamado levels = . factor ( c ( \"Discordo totalmente\" , \"Discordo parcialmente\" , \"Indiferente\" , \"Concordo parcialmente\" , \"Concordo totalmente\" ), levels = c ( \"Discordo totalmente\" , \"Discordo parcialmente\" , \"Indiferente\" , \"Concordo parcialmente\" , \"Concordo totalmente\" )) Pode parecer um pouco confuso agora, mas iremos esclarecer estes pontos nos pr\u00f3ximos t\u00f3picos.","title":"2.3.3. Lidando com fatores"},{"location":"01_introducao/#234-lidando-com-data-e-tempo","text":"Muitas vezes precisamos lidar com data, como por exemplo, filtrar nossa an\u00e1lise em um intervalo de tempo. Por\u00e9m, n\u00fameros e textos n\u00e3o s\u00e3o suficientes para entender as regras impostas pelas datas, como por exemplo, \u201c01/01/2019\u201d \u00e9 mais recente que \u201c31/12/2018\u201d. Sys . Date () Parece uma vari\u00e1vel texto, n\u00e3o? Por\u00e9m se aplicarmos a fun\u00e7\u00e3o str () , que serve para vermos qual \u00e9 o tipo do dado veremos que na verdade temos uma vari\u00e1vel do tipo Date . Nem sempre teremos que nos preocupar com isso, mas caso voc\u00ea esteja querendo plotar uma s\u00e9rie temporal essa transforma\u00e7\u00e3o \u00e9 bem importante. str ( Sys . Date ()) Caso voc\u00ea tenha ficado curiosa, por baixo a vari\u00e1vel Date \u00e9 do tipo num\u00e9rico e, por conven\u00e7\u00e3o, nada mais \u00e9 do que a quantidade de segundos passados desde 1 de Janeiro de 1970.","title":"2.3.4. Lidando com data e tempo"},{"location":"01_introducao/#235-lidando-com-logicosbooleanos","text":"Valores booleanos s\u00e3o resultados de opera\u00e7\u00f5es booleanas e podem ser definidos como verdadeiros ou falsos . Por conven\u00e7\u00e3o, trabalhamos com os termos em ingl\u00eas. Portanto, TRUE ou FALSE . Por opera\u00e7\u00f5es booleanas, podemos pensar em diferentes testes que tenham necessariamente uma resposta ou verdadeira ou falsa. Por exemplo, 3 \u00e9 maior do que 1? Verdadeiro! E 3 \u00e9 menor do que 2? Falso! Vamos realizar essas duas opera\u00e7\u00f5es no R. # 3 \u00e9 maior do que 1 ? 3 > 1 # 3 \u00e9 maior do que 1 ? 3 < 2 Existem, obviamente, outras opera\u00e7\u00f5es. \u00c9 poss\u00edvel tamb\u00e9m testar a igualdade entre dois valores com == . # 2 \u00e9 igual a 2 ? 2 == 2 Tamb\u00e9m podemos testar se dois valores s\u00e3o diferentes. # 120 \u00e9 diferente de 20 ? 120 != 20 Outras varia\u00e7\u00f5es utilizadas s\u00e3o o maior ou igual ( >= ) e o menor ou igual ( <= ). Al\u00e9m disso, tamb\u00e9m \u00e9 poss\u00edvel realizar essas opera\u00e7\u00f5es com textos. # \"FFLCH\" \u00e9 igual a \"ICB\" ? \"FFLCH\" == \"ICB\" N\u00e3o iremos introduzir essa ideia aqui, mas caso seja de interesse tamb\u00e9m podemos utilizar as no\u00e7\u00f5es de maior e menor para textos. Voc\u00ea teria um palpite de como um texto pode ser maior do que outro?","title":"2.3.5. Lidando com l\u00f3gicos/booleanos"},{"location":"01_introducao/#236-valores-ausentes-missings","text":"O que s\u00e3o missings e por que existe um valor especial para eles? Existem dois tipos de valores missing, o NA ( not available ) e o NaN ( not a number ), ambos tem sentidos semelhantes, por\u00e9m o primeiro \u00e9 mais gen\u00e9rico para cada tipo de dado. Para sabermos se um certo dado \u00e9 missing, utilizamos a fun\u00e7\u00e3o is . na () . is . na ( NA ) is . na ( 99 ) Por que esse c\u00f3digo retorna NA ? NA == NA","title":"2.3.6. Valores ausentes/ missings"},{"location":"01_introducao/#3-exercicios-parte-1","text":"","title":"3. Exerc\u00edcios - Parte 1"},{"location":"01_introducao/#31-tipos-de-dados","text":"Marque verdadeiro ou falso. Caso verdadeiro, informe o tipo de dado: Obs: Caso apare\u00e7a \u201c+\u201d no seu console ao testar as afirma\u00e7\u00f5es, basta apertar \u201cEsc\u201d 33 , 5 \"Ol\u00e1 mundo\" \"O 'R' \u00e9 uma linguagem legal\" \"O 'R \u00e9 uma linguagem legal\" \" O 'R \u00e9 uma linguagem legal' 400 e + 10 factor ( \"oi\" , levels = c ( \"oi\" , \"tchau\" )) TRUE FALSE","title":"3.1. Tipos de Dados"},{"location":"01_introducao/#4-estrutura-de-dados","text":"As estruturas de dados s\u00e3o maneiras de organizar e guardar dados dentro da linguagem para que possamos trabalhar de forma mais eficiente. No nosso cotidiano utilizaremos tr\u00eas destas estruturas: vetores , listas e dataframes . Essas tr\u00eas estruturas podem ser dividas entre homog\u00eaneas e heterog\u00eaneas. Mas o que isso significa? Basicamente diz respeito a quantidade de tipos de dados que ela pode receber, isto \u00e9, estruturas homog\u00eaneas s\u00f3 podem receber um tipo de dado, enquanto as estruturas heterog\u00eaneas podem receber mais de um tipo de dado.","title":"4. Estrutura de dados"},{"location":"01_introducao/#41-vetores-atomicos","text":"Um vetor at\u00f4mico \u00e9 a estrutura mais b\u00e1sica no R; \u00e9 um vetor de dados homog\u00eaneo com apenas uma dimens\u00e3o. Imagine o vetor como um tr\u00eas em que os valores est\u00e3o ordenados em posi\u00e7\u00f5es (primeiro, segundo, terceiro) e que todos os valores contidos por ele precisam ser do mesmo tipo. Ilustra\u00e7\u00e3o de um trem Que tal um exemplo? Imagine que voc\u00ea queira organizar em um vetor a quantidade de pessoas dentro de vag\u00f5es de um trem. Nesse sentido, a quantidade de pessoas no primeira vag\u00e3o \u00e9 seguida da quantidade de pessoas no segundo e assim por diante. c ( 120 , 29 , 191 , 18 , 39 ) Quantas pessoas est\u00e3o no segundo vag\u00e3o? 29? Acertou! Perceba ent\u00e3o que para construir um vetor basta colocarmos os valores dentro de c () .","title":"4.1. Vetores (at\u00f4micos)"},{"location":"01_introducao/#411-indexando-vetores","text":"Dado que criamos objetos, podemos acessar os valores espec\u00edficos a partir da posi\u00e7\u00e3o dentro do vetor. No exemplo anterior, voc\u00ea poderia ter pedido para o R lhe responder quem est\u00e1 na segunda posi\u00e7\u00e3o. Como fazer isso? basta salvar o vetor em uma vari\u00e1vel e color [ 2 ] trem <- c ( 120 , 29 , 191 , 18 , 39 ) trem[1] Para indexarmos mais de um elemento podemos indexar de duas formas. Logo se quis\u00e9ssemos o n\u00famero de pessoas no terceiro e quarto vag\u00e3o: trem [ c ( 3 , 4 )] trem [ 3 : 4 ] O que acontece se voc\u00ea utilizar [ 3 : 5 ] ? trem [ 3 : 5 ]","title":"4.1.1. Indexando vetores"},{"location":"01_introducao/#42-listas","text":"Em geral, dificilmente utilizamos as listas de maneira pura. Contudo, entender o funcionamento dela \u00e9 essencial para pegar os fundamentos de uma outra estrutura de dados. Vamos montar um guarda-roupa com tr\u00eas gavetas: Primeira gaveta: 3 meias Segunda gaveta: 5 camisetas com logotipo que vai de 1 at\u00e9 5 Terceira gaveta: uma caixa com dois rel\u00f3gios Uma forma de representar este guarda-roupa \u00e9 por meio de uma lista! lista <- list ( c ( \"Meia 1\" , \"Meia 2\" , \" Meia 3\" ), c ( 1 , 2 , 3 , 4 , 5 ), list ( c ( \"Relogio 1\" , \"Relogio 2\" ))) Listas s\u00e3o parecidas com vetores at\u00f4micos, por\u00e9m elas podem conter vetores de qualquer tipo (num\u00e9ricos, l\u00f3gicos, texto) e at\u00e9 mesmo outras listas.","title":"4.2. Listas"},{"location":"01_introducao/#421-indexando","text":"Apesar de parecido com um vetor at\u00f4mico, a indexa\u00e7\u00e3o tem alguns aspectos diferentes! Quando indexamos um vetor, obtemos o elemento a partir de [] em que dentro colocamos a posi\u00e7\u00e3o de interesse, por\u00e9m, se fizermos o mesmo com a lista \u00e9 como se abr\u00edssemos apenas a gaveta, mas n\u00e3o acessamos o que est\u00e1 dentro dela. Ou seja, para acessar o elemento da lista precisamos utilizar [[]] . lista [ 1 ] # Obtendo a posicao da lista lista [[ 1 ]] # Obtendo os elementos da lista lista [[ 1 ]][ 1 ] lista [[ 3 ]][[ 1 ]] # Obtendo o elemento da lista dentro de outra lista","title":"4.2.1. Indexando"},{"location":"01_introducao/#43-dataframes","text":"Se voc\u00ea j\u00e1 utilizou uma planilha de Excel o DataFrame n\u00e3o possui quase nada de diferente. Assim como as listas, data frames s\u00e3o estruturas de dados heterog\u00eaneas. Voc\u00ea saberia dizer por que? tabela <- data.frame ( ano = c ( 2014 , 2014 , 2015 , 2015 , 2016 , 2016 ), pais = c ( 'Brasil' , 'China' , 'Brasil' , 'China' , 'Brasil' , 'China' ), pib = c ( 100 , 130 , 110 , 140 , 160 , 170 ), pop = c ( 3 , 8 , 4 , 9 , 6 , 14 )) tabela Diferentemente do Excel, n\u00e3o podemos selecionar uma c\u00e9lula e alterar um dado. No R, para manipular e visualizar uma tabela precisamos utilizar fun\u00e7\u00f5es. N\u00e3o se estresse caso nunca tenho ouvido falar delas. Pense apenas que elas realizam alguma a\u00e7\u00e3o . Repare nos resultados das fun\u00e7\u00f5es a seguir: View ( tabela ) # mostra o banco no console head ( tabela ) # mostra as seis primeiras linhas do banco no console str ( tabela ) # mostra a estrutura da tabela names ( tabela ) # mostra o nome das vari \u00e1 veis nrow ( tabela ) # n \u00ba de linhas ncol ( tabela ) # n \u00ba de colunas dim ( tabela ) # dimens \u00f5 es","title":"4.3. Dataframes"},{"location":"01_introducao/#431-indexando","text":"Assim como data frames, a indexa\u00e7\u00e3o tamb\u00e9m tem mais de uma dimens\u00e3o, isto \u00e9, primeiro indexamos a linha e depois a coluna, como por exemplo: tabela [ 1 , 2 ] # Primeira linha , segunda coluna tabela [ 1 ,] # Primeira linha , todas as colunas tabela [, 1 ] # Todas as linhas , primeira coluna tabela [ 1 : 3 ,] # Linhas de 1 at\u00e9 3 , todas as colunas tabela [, 2 : 4 ] # todas as linhas , colunas de 2 at\u00e9 4 Como estamos lidando com tabelas tamb\u00e9m podemos indexar com o nome das colunas tabela [, \"pais\" ] tabela [ 2 , \"pais\" ] Por fim tamb\u00e9m podemos indexar utilizando o operador $ seguido do nome da coluna. tabela$pib tabela$pib [ 1 ]","title":"4.3.1. Indexando"},{"location":"01_introducao/#432-importando-dataframes-csv-excel-etc","text":"Uma das maneiras mais eficientes de se importar dados para o R \u00e9 pelo uso dos seguintes pacotes: readr para a leitura de CSVs. readxl para a leitura de planilhas de Excel. haven para a leitura de arquivos. Instalando pacotes do R O R n\u00e3o possui todos os pacotes previamente. Em geral, utilizaremos o comando install . packages () para instalar pacotes no R. Execute o comando install . packages ( c ( 'readr' , 'readxl' , 'haven' )) . Lembre-se de carregar o pacote no R com o comando library () . Por exemplo, library ( readr ) . Voc\u00ea sabia que o TSE (Tribunal Superior Eleitoral) libera diversos dados sobre as elei\u00e7\u00f5es no site deles? Que tal tentar baixar o banco de candidatos? Para isso, baixe os arquivos: Candidatos - CSV Candidatos - CSV2 Candidatos - TAB Candidatos - Arroba Candidatos - Excel Candidatos - Stata \u00c0s vezes, o navegador n\u00e3o ir\u00e1 fazer o download automaticamente e lhe mostrar\u00e1 uma tela repleta de caracteres. Calma! Clique com o bot\u00e3o direito na tela e selecione a op\u00e7\u00e3o Save Page As\u2026 . Recomendamos que voc\u00ea salve os dados dentro de uma pasta chamada data ou dados para manter o projeto organizado. Para importar um CSV para o R, utilize a fun\u00e7\u00e3o read_csv () do pacote readr . Fique atento com o lugar que voc\u00ea salvou os arquivos! Neste exemplo, os arquivos est\u00e3o salvos dentro da pasta data . library ( readr ) banco_virgula <- read_csv ( 'data/candidatos_sp_virgula.csv' ) Se tudo tiver dado certo, agora voc\u00ea ter\u00e1 um banco_virgula no seu ambiente de vari\u00e1veis. Mas nem sempre um banco de dados \u00e9 separado por v\u00edrgula e mesmo assim ele pode ter a extens\u00e3o .csv . Bancos separados por ponto e v\u00edrgula ; . banco_pontovirgula <- read_csv2 ( 'data/candidatos_sp_pontovirgula.csv' ) Banco separados por tabs \\ t . banco_tab <- read_tsv ( 'data/candidatos_sp_tab.csv' ) Banco separados por @ ou qualquer outro caractere . banco_arroba <- read_delim ( 'data/candidatos_sp_arroba.csv' , delim = '@' ) Banco Excel. library ( readxl ) banco_excel <- read_excel ( 'data/candidatos_sp_excel.xlsx' ) Repare que o n\u00famero de linhas do banco Excel \u00e9 menor! Por que isso aconteceu? Banco Excel - Abas library ( readxl ) banco_excel_1 <- read_excel ( 'data/candidatos_sp_excel.xlsx' , sheet = 1 ) banco_excel_1 <- read_excel ( 'data/candidatos_sp_excel.xlsx' , sheet = 2 ) Banco Stata library ( haven ) banco_stata <- read_stata ( 'data/candidatos_sp_stata.dta' )","title":"4.3.2. Importando dataframes (csv, Excel, etc.)"},{"location":"01_introducao/#5-exercicio-parte-2","text":"","title":"5. Exerc\u00edcio - Parte 2"},{"location":"01_introducao/#51-dataframes","text":"Crie um dataframe com o nome, idade e filme preferido dos seus colegas de turma. Como criar um dataframe? Lembre-se que para criar um dataframe utilizamos a fun\u00e7\u00e3o data . frame () e que essa fun\u00e7\u00e3o recebe vetores como par\u00e2metros para cada coluna que desejamos criar. Por exemplo, se voc\u00ea quiser criar uma dataframe com uma lista de n\u00fameros basta executar data . frame ( lista_numeros = c ( 1 , 2 , 3 , 4 , 5 , 6 , 7 )) Crie uma lista composta por 3 elementos. Fa\u00e7a um script que documente o passo a passo da cria\u00e7\u00e3o do dataframe. Como podemos saber o conte\u00fado do segundo elemento da lista? Utilze a indexa\u00e7\u00e3o . No R temos, bancos para fins did\u00e1ticos. Para utiliz\u00e1-los basta usar a fun\u00e7\u00e3o data. Para esse exerc\u00edcios utilizaremos o banco mtcars. Execute data ( mtcars ) . Repare que agora voc\u00ea pode acessar o banco mtcars da mesma maneira que fizemos anteriormente com outros dataframes. Visualize o banco. Do que se trata? Quais s\u00e3o suas vari\u00e1veis? E suas dimens\u00f5es? Selecione as 10 primeiras observa\u00e7\u00f5es","title":"5.1. DataFrames"},{"location":"01_introducao/#5-funcoes","text":"Como voc\u00ea deve ter notado mencionamos algumas vezes a palavra fun\u00e7\u00e3o durante o texto. Mas o que \u00e9 isso? Podemos pensar cada fun\u00e7\u00e3o como uma a\u00e7\u00e3o . Por exemplo, imagine voc\u00ea possa controlar a sua vida por meio de fun\u00e7\u00f5es . Se as coisas funcionam assim, provavelmente ter\u00edamos uma fun\u00e7\u00e3o levantar () , beber_aguar () e assim por diante. No R, o princ\u00edpio \u00e9 o mesmo e precisamos utilizar fun\u00e7\u00f5es para executar quaisquer comandos que precisamos que sejam operados. Por exemplo, quando voc\u00ea executou read_csv () , voc\u00ea chamou um c\u00f3digo que abre o arquivo especificado e estrutura cada linha dentro de um dataframe. Mas como uma fun\u00e7\u00e3o sabe sobre onde ela precisa operar? Como read_csv () sabia que precisava abrir aquele arquivo? Para isso, utilizamos par\u00e2metros . Par\u00e2metros alteram o comportamento das nossas fun\u00e7\u00f5es e nos permitem especificar, por exemplo, um arquivo para a read_csv () escrevendo read_csv ( 'arquivo.csv' ) . Vamos ver isso na pr\u00e1tica com outra fun\u00e7\u00e3o bastante importante, a mean () . Como aprender a utilizar fun\u00e7\u00f5es? Obviamente, voc\u00ea pode utilizar o Google, mas muitas vezes n\u00e3o \u00e9 necess\u00e1rio sair do RStudio. Se voc\u00ea quiser, utilize o comando ? mean e tente ler a documenta\u00e7\u00e3o e os exemplos. Pacotes instalados pelo CRAN necessariamente s\u00e3o acompanhados por uma documenta\u00e7\u00e3o que explica o que as suas fun\u00e7\u00f5es fazem. Vamos tentar rodar um exemplo? x <- c ( 1 , 2 , 3 ) xm <- mean ( x ) xm A fun\u00e7\u00e3o mean () calcula a m\u00e9dia de qualquer vetor num\u00e9rico para a gente e podemos utilizar para ter uma no\u00e7\u00e3o dos nossos dados durante uma an\u00e1lise.","title":"5. Fun\u00e7\u00f5es"},{"location":"01_introducao/#51-pacotes","text":"Segundo a defini\u00e7\u00e3o do livro R Packages, escrito por Hadley Wickham, um pacote \u00e9 uma unidade fundamental de compartilhamento de c\u00f3digos, dados, documenta\u00e7\u00e3o e testes. Em outras palavras, os pacotes s\u00e3o cole\u00e7\u00f5es de c\u00f3digos (fun\u00e7\u00f5es) e dados desenvolvidos pela comunidade. Estes pacotes ficam localizados no que chamamos de reposit\u00f3rio. O principal reposit\u00f3rio recebe o nome de C**omprehensive **R **A**rchive **N**etwork, o tamb\u00e9m chamado, CRAN. Mas existem outros tamb\u00e9m, como o Github, no qual a forma de obter os pacotes muda. Para instalar um pacote, utilize o comando install . packages () em que o argumento principal \u00e9 o nome do pacote que queremos instalar. Uma peculiaridade desta fun\u00e7\u00e3o \u00e9 que por padr\u00e3o ela instala os pacotes que est\u00e3o no CRAN, como por exemplo, vamos instalar um pacote chamado \u201cdplyr\u201d install . packages ( \"dplyr\" ) Ap\u00f3s instalarmos o pacote, devemos habilit\u00e1-lo com uma fun\u00e7\u00e3o chamada library () library ( dplyr ) Caso o pacote n\u00e3o esteja no CRAN, mas sim no Github, devemos instalar o pacote com o auxilio de uma fun\u00e7\u00e3o chamada install_github () do pacote devtools . install . packages ( \"devtools\" ) library ( devtools ) Pacotes no GitHub Caso o seu pacote n\u00e3o esteja liberado no CRAN ou caso deseje ter acesso \u00e0 vers\u00e3o de desenvolvimento, voc\u00ea ir\u00e1 precisar utilizar a fun\u00e7\u00e3o install_github () do pacote devtools que recebe como par\u00e2metro < dono - do - pacote >/< nome - do - pacote > . Por exemplo, install_github ( \"abjur/abjutils\" ) . N\u00e3o se esque\u00e7a de habilitar o devtools com a fun\u00e7\u00e3o library ( devtools ) .","title":"5.1. Pacotes"},{"location":"01_introducao/#6-controladores-de-fluxo","text":"\u00c9 muito comum estabelecermos uma condi\u00e7\u00e3o para tomar uma decis\u00e3o, como por exemplo, \u2018Porcentagem de votos maior que 50% pode significar vit\u00f3ria, caso contr\u00e1rio, derrota\u2019. Para que possamos fazer isso, utilizaremos o if / else e o for !","title":"6. Controladores de Fluxo"},{"location":"01_introducao/#61-ifelse","text":"A estrutura do if/else \u00e9 a seguinte: if ( < condicao > ) { < comando1 > < comando2 > < etc > } else { < comando3 > < comando4 > < etc > } Podemos interpret\u00e1-la da seguinte maneira: Se a condi\u00e7\u00e3o for verdadeira, execute os comandos 1 e 2, caso contr\u00e1rio, execute os comandos 3 e 4.","title":"6.1. if/else"},{"location":"01_introducao/#62-for","text":"for ( i in x ) { < comando1 > < comando2 > } N\u00f3s lemos o for acima da seguinte maneira: Para cada valor \u201ci\u201d presente na sequ\u00eancia \u201cx\u201d, realize tais comandos. Ou seja, para cada linha da nossa tabela, some um ao percentual de votos recebidos. Vamos criar o seguinte dataframe : ano : ano da observa\u00e7\u00e3o. pais : pa\u00eds da observa\u00e7\u00e3o. pip : Produto Interno Bruto do pa\u00eds. pop : Popula\u00e7\u00e3o do pa\u00eds. tabela <- data.frame ( ano = c ( 2014 , 2014 , 2015 , 2015 , 2016 , 2016 ), pais = c ( 'Brasil' , 'China' , 'Brasil' , 'China' , 'Brasil' , 'China' ), pib = c ( 100 , 130 , 110 , 140 , 160 , 170 ), pop = c ( 3 , 8 , 4 , 9 , 6 , 14 )) Nosso objetivo: Criar uma terceira coluna com o PIB per capta com um for for ( i in 1 : nrow ( tabela )) { print ( tabela $ pib [ i ] ) } Vamos entender algumas coisas aqui, nrow ( tabela ) \u00e9 uma fun\u00e7\u00e3o que retorna o n\u00famero de linhas de uma tabela, ou seja, seu resultado \u00e9 um n\u00famero. Quando temos 1 : nrow ( tabela ) , estamos criando um vetor com uma sequ\u00eancia de 1 at\u00e9 o n\u00famero de linhas da nossa tabela, no caso, 6. Isso significa que nosso for vai percorrer as treze linhas da tabela. Uma vez que o i assumir\u00e1 os valores de 1 at\u00e9 6, podemos indexar o vetor tabela $ pip [ i ] com o [ i ] para obter o n\u00famero do PIB correspondente a linha i . Dessa maneira podemos dividir tabela $ pip [ i ] pela tabela $ pop [ i ] e obter a _renda per capta. Vamos agora voltar ao nosso objetivo principal: tabela $ pib_capta <- NA # Criando uma coluna vazia for ( i in 1 : nrow ( tabela )) { tabela $ pib_capta [ i ] <- tabela $ pib [ i ] / tabela $ pop [ i ] } print ( tabela ) Por fim, n\u00f3s podemos misturar o for com o if para obter um comportamento customiz\u00e1vel dentro do nosso loop . Por exemplo, vamos criar uma classifica\u00e7\u00e3o de PIB per capta entre alto e baixo. Para isso, iremos utilizar o 20 como o discriminador entre essas duas classes. Nesse sentido, se pib_capta for maior do que 20 devemos classificar tabela $ pip_capta_class <- NA # Criando uma coluna vazia for ( i in 1 : nrow ( tabela )) { if ( tabela $ pib_capta [ i ] > 20 ) { tabela $ pip_capta_class [ i ] <- ' Alto ' } else { tabela $ pip_capta_class [ i ] <- ' Baixo ' } } print ( tabela ) PARAB\u00c9NS!!! Enfim, ap\u00f3s esse breve resumos de conceitos b\u00e1sicos de programa\u00e7\u00e3o voc\u00ea ser\u00e1 capaz de interagir com pacotes com uma vasta variedade de pacotes, al\u00e9m de conseguir desenvolver as pr\u00f3prias solu\u00e7\u00f5es quando for necess\u00e1rio.","title":"6.2. for"},{"location":"01_introducao/#7-exercicios","text":"","title":"7. Exerc\u00edcios"},{"location":"01_introducao/#exercicio-1-tipos-de-dados","text":"Execute os c\u00f3digos abaixo e verifique se s\u00e3o dados v\u00e1lidos em R. Caso verdadeiro, informe o tipo de dado: Obs: Caso apare\u00e7a \u201c+\u201d no seu console ao testar as afirma\u00e7\u00f5es, basta apertar \u201cEsc\u201d 33 , 5 \"Ol\u00e1 mundo\" \"O 'R' \u00e9 uma linguagem legal\" \"O 'R \u00e9 uma linguagem legal\" \" O 'R \u00e9 uma linguagem legal' 400 e + 10 factor ( \"oi\" , levels = c ( \"oi\" , \"tchau\" )) true False","title":"Exerc\u00edcio 1 - Tipos de dados"},{"location":"01_introducao/#exercicio-2-manipulando-variaveis","text":"Altere o valor de v_numero para 42 v_numero <- 42.5 Altere o valor de v_caractere para \u201cuniverso\u201d. v_caractere <- \"algum texto\" ` Altere o valor de v_logical para FALSE `v_logical <- TRUE`","title":"Exerc\u00edcio 2 - Manipulando vari\u00e1veis"},{"location":"01_introducao/#exercicio-3-estruturas-de-dados","text":"Crie dois vetores: O primeiro ( nome ) deve conter o nome de pelo menos 5 colegas que est\u00e3o sentandos ao seu redor. O segundo ( altura ) deve conter a altura desses colegas. vetor_nome <- c () vetor_altura <- c () Acesse o primeiro nome do vetor_nome . Lembre-se que voc\u00ea precisa dos [] . Acesse os primeiros tr\u00eas valores de altura no vetor_altura . Fa\u00e7a isso apenas utilizando [] e : Fa\u00e7a isso apenas utilizando [] e c () Crie um dataframe a partir de vetor_nome e vetor_altura . tabela_colegas <- data.frame ( nome = < completar > , altura = < completar > ) Usando a indexa\u00e7\u00e3o , obtenha: O vetor nome dentro do dataframe tabelas_colegas O vetor altura dentro do dataframe tabelas_colegas Obtenha a primeira observa\u00e7\u00e3o da sua tabela (primeira linha) Utilizando fun\u00e7\u00f5es obtenha: A m\u00e9dia de altura dos seus colegas Uma tabela ( table () ) dos nomes dos seus colegas O desvio padr\u00e3o da altura ( sd () )","title":"Exerc\u00edcio 3 - Estruturas de Dados"},{"location":"01_introducao/#exercicio-4-controladores-de-fluxo","text":"Imprima todas as alturas de tabelas_colegas com for e print () . Crie uma classifica\u00e7\u00e3o para a altura dos seus colegas com for e if . N\u00e3o se preocupe com o valor utilizado. Contudo, case deseje, voc\u00ea pode dividi-los pela mediana ou pela m\u00e9dia .","title":"Exerc\u00edcio 4 - Controladores de Fluxo"},{"location":"01_introducao/#exercicio-5-importacao-de-dados","text":"Escolha um dos bancos abaixo ou qualquer outro de seu interesse. Baixe o banco, utilize as fun\u00e7\u00f5es para explorar as vari\u00e1veis, retire algum resumo de uma vari\u00e1vel (m\u00e9dia, contagem, etc.). Relembrando as fun\u00e7\u00f5es Voc\u00ea pode utilizar View () , head () , str () , names () , entre outras para ter uma ideia geral do banco de dados. Para extrair estat\u00edsticas, voc\u00ea pode utilizar mean () , sd () , median () , etc. Lembre-se que o Google \u00e9 o seu melhor amigo! Pesquisa outros comandos que sejam do seu interesse! Banco Link Banco Elei\u00e7\u00f5es Download Pre\u00e7o M\u00e9dio de Combust\u00edveis no Brasil Download Banco de Pokemon Download Vagas de Emprego em Nova Iorque Download","title":"Exerc\u00edcio 5 - Importa\u00e7\u00e3o de Dados"},{"location":"01_introducao/#exercicio-6-desafio","text":"Com o banco de dados do exerc\u00edcio anterior tente levantar algumas hip\u00f3teses sobre as rela\u00e7\u00f5es de vari\u00e1veis. Por exemplo, \u201ceu acho que X causa Y\u201d. Anote todas essas hip\u00f3teses. Uma vez feito isso, tente: Criar um gr\u00e1fico que ressalte a rela\u00e7\u00e3o entre essas vari\u00e1veis. Procure rodar um teste estat\u00edstico que ponha \u00e0 prova a sua hip\u00f3tese (Teste t, ANOVA, regress\u00e3o linear, regress\u00e3o log\u00edstica, etc.). Por onde come\u00e7ar? Existe um pacote de visualiza\u00e7\u00e3o de dados muito famoso para o R chamado ggplot2 . Quanto ao teste estat\u00edstico, o R possu\u00ed todos os testes citados implementados, ou seja, voc\u00ea n\u00e3o precisa baixar um pacote para aplic\u00e1-los. Tente procurar na internet . Existem refer\u00eancias tanto em portugu\u00eas quanto em ingl\u00eas.","title":"Exerc\u00edcio 6 - Desafio"},{"location":"02_estruturar/","text":"1. tidyr \u00b6 O tidyr \u00e9 o pacote utilizado para estruturar os nossos bancos de dados. Em geral, ele pode ser utilizado para unir ( unite ) e separar ( separate ) colunas ou para derreter ( gather ) e esticar ( spread ) as colunas. Esse pacote \u00e9 contru\u00eddo com base no conceito de tidy data . Deixar o seus dados tidy significa transformar a estrutura dos dados de tal maneira que tenhamos observa\u00e7\u00f5es nas linhas, vari\u00e1veis nas colunas e valores nas c\u00e9lulas. Em geral, esperamos tamb\u00e9m que um banco tidy contenha apenas uma unidade de observa\u00e7\u00e3o, granularidade, etc. O que \u00e9 unidade de observa\u00e7\u00e3o / granularidade? Trata-se da unidade contida nas linhas do seu banco. Por exemplo, se montarmos um banco de dados com informa\u00e7\u00f5es sobre pessoas (altura, idade, peso, etc.) em cada linha teremos pessoas como unidade de observa\u00e7\u00e3o. Tente imaginar a unidade de observa\u00e7\u00e3o de informa\u00e7\u00f5es como PIP, desemprego, entre outras coisas.s 1.1 separate \u00b6 Download do Banco Vamos come\u00e7ar abrindo o nosso banco. Repare que j\u00e1 estamos carregando o pacote tidyr . Instalando pacotes Caso voc\u00ea n\u00e3o tenha o tidyr no seu computador, por favor, execute o c\u00f3digo install . packages ( 'tidyr' ) . library(readr) library(tidyr) banco <- read_csv('data/ramen-ratings.zip') separate () \u00e9 uma fun\u00e7\u00e3o do pacote tidyr que tem como objetivo separar valores contidos em uma coluna. \u00c0s vezes, mais de uma informa\u00e7\u00e3o \u00e9 agrupado dentro da mesma coluna. Voc\u00ea consegue identificar no nosso banco de dados em qual coluna isso acontece? Fun\u00e7\u00f5es para explorar dataframes Tente utilizar fun\u00e7\u00f5es para explorar o seu dataframe. Por exemplo, com head () conseguimos obter facilmente as primeiras linhas do nosso banco. Experiemente utilizar table () dessa vez j\u00e1 que o banco possu\u00ed uma quantidade razo\u00e1vel de vari\u00e1veis categ\u00f3ricas. Voc\u00ea percebeu alguma coisa de estranho na vari\u00e1vel Top Ten ? O que? Se voc\u00ea percebeu que na verdade ela cont\u00e9m duas vari\u00e1veis, parab\u00e9ns! Agora temos um exemplo para usarmos a fun\u00e7\u00e3o separate () . Como o separate () funciona? Tente executar o comando ? separate . A documenta\u00e7\u00e3o do tidyverse tende a ser muito boa e normalmente teremos uma boa explica\u00e7\u00e3o de como a fun\u00e7\u00e3o opera e de quais par\u00e2metros precisamos utilizar nela. No caso, o separate () recebe (1) no primeiro par\u00e2metro o banco de dados, (2) no segundo, a coluna que desejamos separar, (3) na terceira o nome das colunas que desejamos criar a partir da coluna informada no segundo par\u00e2metro, (4) o separador, ou seja, o padr\u00e3o de caracteres que ser\u00e3o utilizados para separar a coluna do segundo par\u00e2metro nas colunas espec\u00edficadas no terceiro par\u00e2metro. Isso pode parecer complicado, mas \u00e9 bem simples. separate ( < dataframe > , < coluna_que_desejamos_separar > , < vetor_com_as_colunas_a_serem_criadas > , < separador > ) Vamos l\u00e1? \ud83d\udcaa separate ( banco , 'Top Ten' , c ( 'top_year' , 'top_position' ), '#' , remove = FALSE ) Que tal dar um View () no seu banco agora? View ( banco ) Salvando altera\u00e7\u00f5es Nunca se esque\u00e7a de que o R n\u00e3o sabe que voc\u00ea deseja sobrescrever uma vari\u00e1vel. Ao contr\u00e1rio do Stata, por exemplo, as altera\u00e7\u00f5es devem ser escritas sobre uma vari\u00e1vel com <- . Caso contr\u00e1rio, o R ir\u00e1 apenas imprimir no console o resultado. banco <- separate ( banco , 'Top Ten' , c ( 'top_year' , 'top_position' ), '#' , remove = FALSE ) Agora, podemos utilizar o View () ou o head () para verificar se deu tudo certo. unite \u00b6 A fun\u00e7\u00e3o unite () faz o oposto da separate () . O nome dela j\u00e1 entrega o objetivo dela, que \u00e9 unir ou concatenar colunas. Um dos melhores exemplos de uso dessa fun\u00e7\u00e3o \u00e9 unir as vari\u00e1veis de dia , m\u00eas e ano . Como n\u00e3o temos essa informa\u00e7\u00e3o no nosso banco, vamos adicionar algumas datas de mentira. set.seed ( 12345 ) banco $ fake_dia <- replicate ( nrow ( banco ), sample ( 1 : 28 , 1 )) banco $ fake_mes <- replicate ( nrow ( banco ), sample ( 1 : 12 , 1 )) banco $ fake_ano <- replicate ( nrow ( banco ), sample ( 2002 : 2016 , 1 )) Ap\u00f3s executar o c\u00f3digo acima, vamos prossguir com a fun\u00e7\u00e3o unite () . Ela recebe (1) no primeiro par\u00e2metro o banco de dados e (2) no segundo o nome da nova vari\u00e1vel. Em seguida, (3) podemos adicionar os nodemos de todas as colunas que queremos concatenar (4) e, por fim, podemos escolher o separador entre as colunas. banco <- unite ( banco , \"data\" , fake_ano , fake_mes , fake_dia , sep = \"-\" ) Virique o resultado com a fun\u00e7\u00e3o head () . Exerc\u00edcios - Parte 1 \u00b6 Exerc\u00edcio - Exemplos de unite e separate \u00b6 Para cada tabela abaixo diga se \u00e9 necess\u00e1rio realizar um unite () ou um separate () . Em seguinda, escreva o c\u00f3digo que voc\u00ea utilizaria. CIDADE PIB \u201cS\u00e3o Jos\u00e9 dos Campos - SP\u201d 19.2 \u201cS\u00e3o Paulo - SP\u201d 20 \u201cPorto Alegre - RS\u201d 8.2 CIDADE ALUNOS - ESCOLAS S\u00e3o Jos\u00e9 dos Campos 19292 - 1882 S\u00e3o Paulo 21828 - 102 Porto Alegre 102761 - 98 Nesse \u00faltimo exemplo, imagine que estamos preparando um banco para realizar uma pesquisa de endere\u00e7os no Google. CIDADE RUA Ubatuba Rua das Pedras Uberl\u00e2ndia Avenida Minas Geras Curitiba Rua dos Cocais Exerc\u00edcio - unite() e separate() na pr\u00e1tica Aplique a fun\u00e7\u00e3o unite () nas colunas Style e Country . Aplique a fun\u00e7\u00e3o separate () na coluna criada no exerc\u00edcio anterior 3. Gather e Spread \u00b6 Voc\u00ea j\u00e1 ouviu falar em bancos no formato wide e long ? No geral, existem duas maneiras de organizar s\u00e9ries temporais. Quando optamos pelo wide , o nosso banco \u00e9 \u201cesticado\u201d horizontalmente; enquanto, quanto a op\u00e7\u00e3o \u00e9 pelo long , o banco \u00e9 \u201cesticado\u201d verticalmente. PIB na China e no Brasil - Wide Pa\u00eds 2015 2016 Brasil 10.2 11.2 China 14.3 18.4 PIB na China e no Brasil - Long Pa\u00eds Ano PIB Brasil 2015 10.2 Brasil 2016 11.2 China 2015 14.3 China 2016 18.4 3.1. gather () \u00b6 gather () \u00e9 utilizado para derreter/agrupar as colunas dos nossos bancos. Essa fun\u00e7\u00e3o recebe (1) o banco de dados, (2) o nome da vari\u00e1vel que est\u00e1 como nome das colunas, (3) o nome da vari\u00e1vel que est\u00e1 nas c\u00e9lulas, (4) os nomes das colunas em que iremos realizar a opera\u00e7\u00e3o sem aspas . Ela pode parecer um pouco complicada de se utilizar do que o unite () e o separate () , mas com um pouco de pr\u00e1tica ela se torna bastante intuitiva. Para quem est\u00e1 acostumado com o Excel, estamos fazendo uma tabela din\u00e2mica ou pivot table . tabela_wide <- tibble :: tribble ( ~ Pa\u00eds , ~ `2015` , ~ `2016` , 'Brasil' , 10.2 , 11.2 , 'China' , 14.3 , 18.4 , ) gather ( tabela_wide , key = 'ano' , value = 'pib' , `2015` , `2016` ) 3.2. spread () \u00b6 A fun\u00e7\u00e3o spread () realiza a opera\u00e7\u00e3o inversa. Ela estica os nossos dados horizontalmente. Mas isso n\u00e3o acaba com o formato tidy do nosso banco? Sim, mas lembre-se que apenas estruturamos os nossos dados de acordo com os princ\u00edpios tidy porque a maior parte das fun\u00e7\u00f5es esperam esse tipo de estrutura! Isso n\u00e3o significa que essa \u00e9 a melhor maneira de, por exemplo, apresentar os nossos dados. A fun\u00e7\u00e3o spread () recebe par\u00e2metros bem parecidos como a gather () . (1) Primeiro, precisamos fornecer o banco de dados; (2) em segundo lugar, o nome da vari\u00e1vel cujo os valores ser\u00e3o dispostos como colunas; (3) por fim, a vari\u00e1vel que fornecer\u00e1 os valores para as c\u00e9lulas. tabela_long <- tibble :: tribble ( ~ pais , ~ ano , ~ pib , 'Brasil' , 2015 , 10.2 , 'Brasil' , 2016 , 11.2 , 'China' , 2015 , 14.3 , 'China' , 2016 , 18.4 , ) spread ( tabela_long , ano , pib ) Exerc\u00edcios - Parte 2 \u00b6 Exerc\u00edcio - spread () \u00b6 Apresente a tabela abaixo de tal maneira que as UFs fiquem nas linhas e o nivel de escolaridade esteja distribu\u00eddo pelas colunas. tabela_escolaridade <- tibble :: tribble ( ~ UF , ~ mes , ~ nivel_escolaridade , 'SP' , 'Jan' , 20.2 , 'SP' , 'Fev' , 29.2 , 'SP' , 'Mar' , 12.3 , 'SP' , 'Abr' , 14.3 , 'RJ' , 'Jan' , 28.2 , 'RJ' , 'Fev' , 19.2 , 'RJ' , 'Mar' , 9.3 , 'RJ' , 'Abr' , 30.3 , ) Fa\u00e7a a mesma coisa agora com a tabela abaixo e deixe o pa\u00eds nas linhas. tabela_pais <- tibble :: tribble ( ~ pais , ~ ano , ~ venda , 'Brasil' , 2014 , 20.2 , 'Brasil' , 2015 , 29.2 , 'Brasil' , 2016 , 12.3 , 'Brasil' , 2017 , 14.3 , 'Colombia' , 2014 , 28.2 , 'Colombia' , 2015 , 19.2 , 'Colombia' , 2016 , 9.3 , 'Colombia' , 2017 , 30.3 , ) Exerc\u00edcio - gather () \u00b6 Transforme as pr\u00f3ximas tabelas em formato tidy . Escolaridade: tabela_pais_escol <- tibble :: tribble ( ~ pais , ~ `Jan` , ~ `Fev` , 'China' , 92 , 20 . 2 , 'EUA' , 10 . 2 , 42 , 'Fran\u00e7a' , 72 . 2 , 26 , 'Chile' , 80 . 2 , 90 , 'Jap\u00e3o' , 19 . 1 , 25 , ) Mortes por arma de fogo tabela_arma_fogo <- tibble :: tribble ( ~ UF , ~ `2015` , ~ `2016` , 'SP' , 92 , 20.2 , 'RJ' , 10.2 , 42 , 'RS' , 72.2 , 26 , 'CO' , 80.2 , 90 , 'PE' , 19.1 , 25 , ) 4. dplyr \u00b6 Dentre os pacotes mais importantes do tidyverse , o dplyr se destaca. Ele traz uma biblioteca poderasa de fun\u00e7\u00f5es que nos permitem transformar dados. Essa \u00e9 a tarefa que voc\u00ea provavelmente passar\u00e1 mais tempo fazendo j\u00e1 que nem sempre os dados est\u00e3o limpos. Muitas vezes teremos que criar vari\u00e1veis ou extrair parte da informa\u00e7\u00e3o presente em uma para que possas rodar um modelo. Quais s\u00e3o os verbos do dplyr ? Obviamente, o pacote \u00e9 extenso e possui uma quantidade razo\u00e1vel de fun\u00e7\u00f5es, mas queremos que voc\u00ea se atente, agora, a tr\u00eas fun\u00e7\u00f5es: select () , filter () , mutate () . 4.1. select () \u00b6 O select () \u00e9 capaz de selecionar colunas espec\u00edficas do nosso banco de dados. Vamos carregar novamente o banco de ramen . library ( dplyr ) library ( readr ) banco <- read_csv ( 'data/ramen-ratings.zip' ) Digamos que seja mais relevante apresentar apenas as vari\u00e1veis Brand e Stars . select ( banco , Brand , Stars ) Parece bem simples, n\u00e3o? Repare apenas que n\u00e3o colocamos aspas nos nomes das vari\u00e1veis dentro do select () . Isso \u00e9 uma coisa um pouco ruim do tidyverse j\u00e1 que \u00e0s vezes precisamos colocar as aspas e \u00e0s vezes n\u00e3o. Fique atento para n\u00e3o errar isso e caso tenha d\u00favidas d\u00ea uma olhada na documenta\u00e7\u00e3o da fun\u00e7\u00e3o com ? select . 4.2. filter () \u00b6 Novamente, o nome da fun\u00e7\u00e3o j\u00e1 entrega o objetivo dela. filter () filtra (d\u00e3\u00e3) as observa\u00e7\u00f5es da nossa tabela. Digamos que voc\u00ea esteja de viagem para o Jap\u00e3o e que queira olhar apenas as avalia\u00e7\u00f5es desse pa\u00eds. Para obter esse resultado, voc\u00ea ter\u00e1 que fazer uso dos operadores l\u00f3gicas Operadores l\u00f3gicos N\u00f3s vimos na primeira aula que operadores l\u00f3gicas s\u00e3o opera\u00e7\u00f5es que retornam necessariamente apenas dois resultados: verdadeiro e falso. A partir de agora, come\u00e7aremos a utilizar eles cada vez mais. Ent\u00e3o, se n\u00e3o estiver se sentindo confort\u00e1vel com o tema, volte para a primeira aula e reveja os exemplos. Qual o operador l\u00f3gico que testa igualdade? Se voc\u00ea pensou no == , acertou! Agora, s\u00f3 precisamos coloc\u00e1-lo dentro do filter () e deixar que m\u00e1gica aconte\u00e7a. Assim como nas outras fun\u00e7\u00f5es, (1) o primeiro argumento \u00e9 o banco de dados. (2) O segundo, no caso, \u00e9 o teste que queremos realisar . Repare que filter () ir\u00e1 retornar todos os valores que tiverem como resposta para o teste o valor TRUE . Logo, no exemplo abaixo, ser\u00e3o retornados todas as observa\u00e7\u00f5es em que Country seja igual a Japan . filter ( banco , Country == 'Japan' )","title":"02 estruturar"},{"location":"02_estruturar/#1-tidyr","text":"O tidyr \u00e9 o pacote utilizado para estruturar os nossos bancos de dados. Em geral, ele pode ser utilizado para unir ( unite ) e separar ( separate ) colunas ou para derreter ( gather ) e esticar ( spread ) as colunas. Esse pacote \u00e9 contru\u00eddo com base no conceito de tidy data . Deixar o seus dados tidy significa transformar a estrutura dos dados de tal maneira que tenhamos observa\u00e7\u00f5es nas linhas, vari\u00e1veis nas colunas e valores nas c\u00e9lulas. Em geral, esperamos tamb\u00e9m que um banco tidy contenha apenas uma unidade de observa\u00e7\u00e3o, granularidade, etc. O que \u00e9 unidade de observa\u00e7\u00e3o / granularidade? Trata-se da unidade contida nas linhas do seu banco. Por exemplo, se montarmos um banco de dados com informa\u00e7\u00f5es sobre pessoas (altura, idade, peso, etc.) em cada linha teremos pessoas como unidade de observa\u00e7\u00e3o. Tente imaginar a unidade de observa\u00e7\u00e3o de informa\u00e7\u00f5es como PIP, desemprego, entre outras coisas.s","title":"1. tidyr"},{"location":"02_estruturar/#11-separate","text":"Download do Banco Vamos come\u00e7ar abrindo o nosso banco. Repare que j\u00e1 estamos carregando o pacote tidyr . Instalando pacotes Caso voc\u00ea n\u00e3o tenha o tidyr no seu computador, por favor, execute o c\u00f3digo install . packages ( 'tidyr' ) . library(readr) library(tidyr) banco <- read_csv('data/ramen-ratings.zip') separate () \u00e9 uma fun\u00e7\u00e3o do pacote tidyr que tem como objetivo separar valores contidos em uma coluna. \u00c0s vezes, mais de uma informa\u00e7\u00e3o \u00e9 agrupado dentro da mesma coluna. Voc\u00ea consegue identificar no nosso banco de dados em qual coluna isso acontece? Fun\u00e7\u00f5es para explorar dataframes Tente utilizar fun\u00e7\u00f5es para explorar o seu dataframe. Por exemplo, com head () conseguimos obter facilmente as primeiras linhas do nosso banco. Experiemente utilizar table () dessa vez j\u00e1 que o banco possu\u00ed uma quantidade razo\u00e1vel de vari\u00e1veis categ\u00f3ricas. Voc\u00ea percebeu alguma coisa de estranho na vari\u00e1vel Top Ten ? O que? Se voc\u00ea percebeu que na verdade ela cont\u00e9m duas vari\u00e1veis, parab\u00e9ns! Agora temos um exemplo para usarmos a fun\u00e7\u00e3o separate () . Como o separate () funciona? Tente executar o comando ? separate . A documenta\u00e7\u00e3o do tidyverse tende a ser muito boa e normalmente teremos uma boa explica\u00e7\u00e3o de como a fun\u00e7\u00e3o opera e de quais par\u00e2metros precisamos utilizar nela. No caso, o separate () recebe (1) no primeiro par\u00e2metro o banco de dados, (2) no segundo, a coluna que desejamos separar, (3) na terceira o nome das colunas que desejamos criar a partir da coluna informada no segundo par\u00e2metro, (4) o separador, ou seja, o padr\u00e3o de caracteres que ser\u00e3o utilizados para separar a coluna do segundo par\u00e2metro nas colunas espec\u00edficadas no terceiro par\u00e2metro. Isso pode parecer complicado, mas \u00e9 bem simples. separate ( < dataframe > , < coluna_que_desejamos_separar > , < vetor_com_as_colunas_a_serem_criadas > , < separador > ) Vamos l\u00e1? \ud83d\udcaa separate ( banco , 'Top Ten' , c ( 'top_year' , 'top_position' ), '#' , remove = FALSE ) Que tal dar um View () no seu banco agora? View ( banco ) Salvando altera\u00e7\u00f5es Nunca se esque\u00e7a de que o R n\u00e3o sabe que voc\u00ea deseja sobrescrever uma vari\u00e1vel. Ao contr\u00e1rio do Stata, por exemplo, as altera\u00e7\u00f5es devem ser escritas sobre uma vari\u00e1vel com <- . Caso contr\u00e1rio, o R ir\u00e1 apenas imprimir no console o resultado. banco <- separate ( banco , 'Top Ten' , c ( 'top_year' , 'top_position' ), '#' , remove = FALSE ) Agora, podemos utilizar o View () ou o head () para verificar se deu tudo certo.","title":"1.1 separate"},{"location":"02_estruturar/#unite","text":"A fun\u00e7\u00e3o unite () faz o oposto da separate () . O nome dela j\u00e1 entrega o objetivo dela, que \u00e9 unir ou concatenar colunas. Um dos melhores exemplos de uso dessa fun\u00e7\u00e3o \u00e9 unir as vari\u00e1veis de dia , m\u00eas e ano . Como n\u00e3o temos essa informa\u00e7\u00e3o no nosso banco, vamos adicionar algumas datas de mentira. set.seed ( 12345 ) banco $ fake_dia <- replicate ( nrow ( banco ), sample ( 1 : 28 , 1 )) banco $ fake_mes <- replicate ( nrow ( banco ), sample ( 1 : 12 , 1 )) banco $ fake_ano <- replicate ( nrow ( banco ), sample ( 2002 : 2016 , 1 )) Ap\u00f3s executar o c\u00f3digo acima, vamos prossguir com a fun\u00e7\u00e3o unite () . Ela recebe (1) no primeiro par\u00e2metro o banco de dados e (2) no segundo o nome da nova vari\u00e1vel. Em seguida, (3) podemos adicionar os nodemos de todas as colunas que queremos concatenar (4) e, por fim, podemos escolher o separador entre as colunas. banco <- unite ( banco , \"data\" , fake_ano , fake_mes , fake_dia , sep = \"-\" ) Virique o resultado com a fun\u00e7\u00e3o head () .","title":"unite"},{"location":"02_estruturar/#exercicios-parte-1","text":"","title":"Exerc\u00edcios - Parte 1"},{"location":"02_estruturar/#exercicio-exemplos-de-unite-e-separate","text":"Para cada tabela abaixo diga se \u00e9 necess\u00e1rio realizar um unite () ou um separate () . Em seguinda, escreva o c\u00f3digo que voc\u00ea utilizaria. CIDADE PIB \u201cS\u00e3o Jos\u00e9 dos Campos - SP\u201d 19.2 \u201cS\u00e3o Paulo - SP\u201d 20 \u201cPorto Alegre - RS\u201d 8.2 CIDADE ALUNOS - ESCOLAS S\u00e3o Jos\u00e9 dos Campos 19292 - 1882 S\u00e3o Paulo 21828 - 102 Porto Alegre 102761 - 98 Nesse \u00faltimo exemplo, imagine que estamos preparando um banco para realizar uma pesquisa de endere\u00e7os no Google. CIDADE RUA Ubatuba Rua das Pedras Uberl\u00e2ndia Avenida Minas Geras Curitiba Rua dos Cocais Exerc\u00edcio - unite() e separate() na pr\u00e1tica Aplique a fun\u00e7\u00e3o unite () nas colunas Style e Country . Aplique a fun\u00e7\u00e3o separate () na coluna criada no exerc\u00edcio anterior","title":"Exerc\u00edcio - Exemplos de unite e separate"},{"location":"02_estruturar/#3-gather-e-spread","text":"Voc\u00ea j\u00e1 ouviu falar em bancos no formato wide e long ? No geral, existem duas maneiras de organizar s\u00e9ries temporais. Quando optamos pelo wide , o nosso banco \u00e9 \u201cesticado\u201d horizontalmente; enquanto, quanto a op\u00e7\u00e3o \u00e9 pelo long , o banco \u00e9 \u201cesticado\u201d verticalmente. PIB na China e no Brasil - Wide Pa\u00eds 2015 2016 Brasil 10.2 11.2 China 14.3 18.4 PIB na China e no Brasil - Long Pa\u00eds Ano PIB Brasil 2015 10.2 Brasil 2016 11.2 China 2015 14.3 China 2016 18.4","title":"3. Gather e Spread"},{"location":"02_estruturar/#31-gather","text":"gather () \u00e9 utilizado para derreter/agrupar as colunas dos nossos bancos. Essa fun\u00e7\u00e3o recebe (1) o banco de dados, (2) o nome da vari\u00e1vel que est\u00e1 como nome das colunas, (3) o nome da vari\u00e1vel que est\u00e1 nas c\u00e9lulas, (4) os nomes das colunas em que iremos realizar a opera\u00e7\u00e3o sem aspas . Ela pode parecer um pouco complicada de se utilizar do que o unite () e o separate () , mas com um pouco de pr\u00e1tica ela se torna bastante intuitiva. Para quem est\u00e1 acostumado com o Excel, estamos fazendo uma tabela din\u00e2mica ou pivot table . tabela_wide <- tibble :: tribble ( ~ Pa\u00eds , ~ `2015` , ~ `2016` , 'Brasil' , 10.2 , 11.2 , 'China' , 14.3 , 18.4 , ) gather ( tabela_wide , key = 'ano' , value = 'pib' , `2015` , `2016` )","title":"3.1. gather()"},{"location":"02_estruturar/#32-spread","text":"A fun\u00e7\u00e3o spread () realiza a opera\u00e7\u00e3o inversa. Ela estica os nossos dados horizontalmente. Mas isso n\u00e3o acaba com o formato tidy do nosso banco? Sim, mas lembre-se que apenas estruturamos os nossos dados de acordo com os princ\u00edpios tidy porque a maior parte das fun\u00e7\u00f5es esperam esse tipo de estrutura! Isso n\u00e3o significa que essa \u00e9 a melhor maneira de, por exemplo, apresentar os nossos dados. A fun\u00e7\u00e3o spread () recebe par\u00e2metros bem parecidos como a gather () . (1) Primeiro, precisamos fornecer o banco de dados; (2) em segundo lugar, o nome da vari\u00e1vel cujo os valores ser\u00e3o dispostos como colunas; (3) por fim, a vari\u00e1vel que fornecer\u00e1 os valores para as c\u00e9lulas. tabela_long <- tibble :: tribble ( ~ pais , ~ ano , ~ pib , 'Brasil' , 2015 , 10.2 , 'Brasil' , 2016 , 11.2 , 'China' , 2015 , 14.3 , 'China' , 2016 , 18.4 , ) spread ( tabela_long , ano , pib )","title":"3.2. spread()"},{"location":"02_estruturar/#exercicios-parte-2","text":"","title":"Exerc\u00edcios - Parte 2"},{"location":"02_estruturar/#exercicio-spread","text":"Apresente a tabela abaixo de tal maneira que as UFs fiquem nas linhas e o nivel de escolaridade esteja distribu\u00eddo pelas colunas. tabela_escolaridade <- tibble :: tribble ( ~ UF , ~ mes , ~ nivel_escolaridade , 'SP' , 'Jan' , 20.2 , 'SP' , 'Fev' , 29.2 , 'SP' , 'Mar' , 12.3 , 'SP' , 'Abr' , 14.3 , 'RJ' , 'Jan' , 28.2 , 'RJ' , 'Fev' , 19.2 , 'RJ' , 'Mar' , 9.3 , 'RJ' , 'Abr' , 30.3 , ) Fa\u00e7a a mesma coisa agora com a tabela abaixo e deixe o pa\u00eds nas linhas. tabela_pais <- tibble :: tribble ( ~ pais , ~ ano , ~ venda , 'Brasil' , 2014 , 20.2 , 'Brasil' , 2015 , 29.2 , 'Brasil' , 2016 , 12.3 , 'Brasil' , 2017 , 14.3 , 'Colombia' , 2014 , 28.2 , 'Colombia' , 2015 , 19.2 , 'Colombia' , 2016 , 9.3 , 'Colombia' , 2017 , 30.3 , )","title":"Exerc\u00edcio - spread()"},{"location":"02_estruturar/#exercicio-gather","text":"Transforme as pr\u00f3ximas tabelas em formato tidy . Escolaridade: tabela_pais_escol <- tibble :: tribble ( ~ pais , ~ `Jan` , ~ `Fev` , 'China' , 92 , 20 . 2 , 'EUA' , 10 . 2 , 42 , 'Fran\u00e7a' , 72 . 2 , 26 , 'Chile' , 80 . 2 , 90 , 'Jap\u00e3o' , 19 . 1 , 25 , ) Mortes por arma de fogo tabela_arma_fogo <- tibble :: tribble ( ~ UF , ~ `2015` , ~ `2016` , 'SP' , 92 , 20.2 , 'RJ' , 10.2 , 42 , 'RS' , 72.2 , 26 , 'CO' , 80.2 , 90 , 'PE' , 19.1 , 25 , )","title":"Exerc\u00edcio - gather()"},{"location":"02_estruturar/#4-dplyr","text":"Dentre os pacotes mais importantes do tidyverse , o dplyr se destaca. Ele traz uma biblioteca poderasa de fun\u00e7\u00f5es que nos permitem transformar dados. Essa \u00e9 a tarefa que voc\u00ea provavelmente passar\u00e1 mais tempo fazendo j\u00e1 que nem sempre os dados est\u00e3o limpos. Muitas vezes teremos que criar vari\u00e1veis ou extrair parte da informa\u00e7\u00e3o presente em uma para que possas rodar um modelo. Quais s\u00e3o os verbos do dplyr ? Obviamente, o pacote \u00e9 extenso e possui uma quantidade razo\u00e1vel de fun\u00e7\u00f5es, mas queremos que voc\u00ea se atente, agora, a tr\u00eas fun\u00e7\u00f5es: select () , filter () , mutate () .","title":"4. dplyr"},{"location":"02_estruturar/#41-select","text":"O select () \u00e9 capaz de selecionar colunas espec\u00edficas do nosso banco de dados. Vamos carregar novamente o banco de ramen . library ( dplyr ) library ( readr ) banco <- read_csv ( 'data/ramen-ratings.zip' ) Digamos que seja mais relevante apresentar apenas as vari\u00e1veis Brand e Stars . select ( banco , Brand , Stars ) Parece bem simples, n\u00e3o? Repare apenas que n\u00e3o colocamos aspas nos nomes das vari\u00e1veis dentro do select () . Isso \u00e9 uma coisa um pouco ruim do tidyverse j\u00e1 que \u00e0s vezes precisamos colocar as aspas e \u00e0s vezes n\u00e3o. Fique atento para n\u00e3o errar isso e caso tenha d\u00favidas d\u00ea uma olhada na documenta\u00e7\u00e3o da fun\u00e7\u00e3o com ? select .","title":"4.1. select()"},{"location":"02_estruturar/#42-filter","text":"Novamente, o nome da fun\u00e7\u00e3o j\u00e1 entrega o objetivo dela. filter () filtra (d\u00e3\u00e3) as observa\u00e7\u00f5es da nossa tabela. Digamos que voc\u00ea esteja de viagem para o Jap\u00e3o e que queira olhar apenas as avalia\u00e7\u00f5es desse pa\u00eds. Para obter esse resultado, voc\u00ea ter\u00e1 que fazer uso dos operadores l\u00f3gicas Operadores l\u00f3gicos N\u00f3s vimos na primeira aula que operadores l\u00f3gicas s\u00e3o opera\u00e7\u00f5es que retornam necessariamente apenas dois resultados: verdadeiro e falso. A partir de agora, come\u00e7aremos a utilizar eles cada vez mais. Ent\u00e3o, se n\u00e3o estiver se sentindo confort\u00e1vel com o tema, volte para a primeira aula e reveja os exemplos. Qual o operador l\u00f3gico que testa igualdade? Se voc\u00ea pensou no == , acertou! Agora, s\u00f3 precisamos coloc\u00e1-lo dentro do filter () e deixar que m\u00e1gica aconte\u00e7a. Assim como nas outras fun\u00e7\u00f5es, (1) o primeiro argumento \u00e9 o banco de dados. (2) O segundo, no caso, \u00e9 o teste que queremos realisar . Repare que filter () ir\u00e1 retornar todos os valores que tiverem como resposta para o teste o valor TRUE . Logo, no exemplo abaixo, ser\u00e3o retornados todas as observa\u00e7\u00f5es em que Country seja igual a Japan . filter ( banco , Country == 'Japan' )","title":"4.2. filter()"}]}
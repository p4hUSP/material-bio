{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Material de Biologia \u00b6 Quem somos? \u00b6 A P4H \u00e9 um grupo formado por alunos de ci\u00eancias sociais com o objetivo de aproximar alunos e profissionais da \u00e1rea de tecnologia, programa\u00e7\u00e3o e an\u00e1lise de dados. Como estudar? \u00b6 Programa\u00e7\u00e3o n\u00e3o se aprende apenas lendo livros e assistindo aulas. \u00c9 fundamental que voc\u00ea dedique pelo menos 1 hora do seu dia para estudar. Al\u00e9m disso, recomendamos que voc\u00ea evite apenas copar e colar o c\u00f3digo do site para o seu computador. Escrever as fun\u00e7\u00f5es \u00e9 \u00f3timo para memoriz\u00e1-las e entender os par\u00e2metros que as fazem funcionar. O que \u00e9 uma linguagem de programa\u00e7\u00e3o e por que utilizamos uma para an\u00e1lise de dados? \u00b6 Uma das maiores diferen\u00e7as n\u00e3o diz respeito ao lado t\u00e9cnico. Analisar dados em Python ou em R \u00e9 gr\u00e1tis! Isso mesmo, voc\u00ea n\u00e3o precisa gastar um centavo para ter acesso a bibliotecas de an\u00e1lise de dados desenvolvidas pelo Google, Amazon, Projeto Apache, entre outras tantas. No que diz respeito ao lado mais t\u00e9cnico, importa para a gente que a linguamge de programa\u00e7\u00e3o, ao contr\u00e1rio do Excel, o Stata e o SPSS, lhe d\u00e1 liberdade para resolver problemas por meio de algor\u00edtmos . Ou seja, se voc\u00ea \u00e9 capaz de descrever um passo-a-passo de como resolver um problema, provavelmente voc\u00ea tamb\u00e9m \u00e9 capaz de traduzir essa l\u00f3gica para uma linguagem de programa\u00e7\u00e3o e deixar que o computador fa\u00e7a o resto Instalando o R \u00b6","title":"Material de Biologia"},{"location":"#material-de-biologia","text":"","title":"Material de Biologia"},{"location":"#quem-somos","text":"A P4H \u00e9 um grupo formado por alunos de ci\u00eancias sociais com o objetivo de aproximar alunos e profissionais da \u00e1rea de tecnologia, programa\u00e7\u00e3o e an\u00e1lise de dados.","title":"Quem somos?"},{"location":"#como-estudar","text":"Programa\u00e7\u00e3o n\u00e3o se aprende apenas lendo livros e assistindo aulas. \u00c9 fundamental que voc\u00ea dedique pelo menos 1 hora do seu dia para estudar. Al\u00e9m disso, recomendamos que voc\u00ea evite apenas copar e colar o c\u00f3digo do site para o seu computador. Escrever as fun\u00e7\u00f5es \u00e9 \u00f3timo para memoriz\u00e1-las e entender os par\u00e2metros que as fazem funcionar.","title":"Como estudar?"},{"location":"#o-que-e-uma-linguagem-de-programacao-e-por-que-utilizamos-uma-para-analise-de-dados","text":"Uma das maiores diferen\u00e7as n\u00e3o diz respeito ao lado t\u00e9cnico. Analisar dados em Python ou em R \u00e9 gr\u00e1tis! Isso mesmo, voc\u00ea n\u00e3o precisa gastar um centavo para ter acesso a bibliotecas de an\u00e1lise de dados desenvolvidas pelo Google, Amazon, Projeto Apache, entre outras tantas. No que diz respeito ao lado mais t\u00e9cnico, importa para a gente que a linguamge de programa\u00e7\u00e3o, ao contr\u00e1rio do Excel, o Stata e o SPSS, lhe d\u00e1 liberdade para resolver problemas por meio de algor\u00edtmos . Ou seja, se voc\u00ea \u00e9 capaz de descrever um passo-a-passo de como resolver um problema, provavelmente voc\u00ea tamb\u00e9m \u00e9 capaz de traduzir essa l\u00f3gica para uma linguagem de programa\u00e7\u00e3o e deixar que o computador fa\u00e7a o resto","title":"O que \u00e9 uma linguagem de programa\u00e7\u00e3o e por que utilizamos uma para an\u00e1lise de dados?"},{"location":"#instalando-o-r","text":"","title":"Instalando o R"},{"location":"01_introducao/","text":"Introdu\u00e7\u00e3o ao R e ao RStudio \u00b6 1. O que \u00e9 o R e o RStudio? \u00b6 1.1. Linguagem de programa\u00e7\u00e3o R \u00b6 O R \u00e9 uma linguagem de programa\u00e7\u00e3o que vem crescendo bastante nos \u00faltimos anos. Apesar de inicialmente ter como p\u00fablico estat\u00edsticos, a linguagem \u00e9 uma das mais utilizadas para an\u00e1lise de dados nas mais diferentes frentes. A flexibilidade trazido por uma \u00ednumera quantidade de pacotes permite lidar n\u00e3o s\u00f3 com tabelas estilo Excel, mas tamb\u00e9m com texto, imagens, etc. Quando baixamos o R pela primera vez nos assustamos com a sua interface, pois ela n\u00e3o \u00e9 das mais agrad\u00e1veis. knitr::include_graphics(\"imgs/r_console.png\") Para solucionar isto e adicionar outras funcionalidades que melhoram a experi\u00eancia de quem utiliza a linguagem, foi desenvolvido uma IDE (Ambiente de desenvolvimento integrado) chamada RStudio . 1.1. RStudio \u00b6 O RStudio nada mais \u00e9 que um software, que integrado com o R, permite uma intera\u00e7\u00e3o melhor com os objetos e rotinas criados com o R. O programa tem quatro pain\u00e9is/se\u00e7\u00f5es: knitr::include_graphics(\"imgs/rstudio_print.png\") A - Console: Local na qual temos o R prompt e que podemos executar linha por linha (chamados de inputs). Al\u00e9m disso, \u00e9 o local no qual os resultados (chamados de outputs) ir\u00e3o aparecer. B - File/Plots/Help: Nesta se\u00e7\u00e3o podemos ter acesso \u00e0s pastas que estamos utilizando durante as nossas rotinas no software, al\u00e9m de visualizar os gr\u00e1ficos gerados a partir das an\u00e1lises e verificar a documenta\u00e7\u00e3o de fun\u00e7\u00f5es e pacotes, que explicaremos em breve. C - Workspace: Os valores gerados no R, como por exemplo, vari\u00e1veis e tabelas que voc\u00ea definiu ir\u00e3o aparecer aqui, sobretudo, na aba Environment. E o hist\u00f3rico de c\u00f3digos rodados na aba History. Veremos nas pr\u00f3ximas aulas que a aba Connections \u00e9 \u00fatil caso estejamos conectados com alguma base de dados externa, como por exemplo, Access ou PostgreSQL. D - Editor: Aqui \u00e9 onde os scripts s\u00e3o escritos. Scripts nada mais s\u00e3o do que uma s\u00e9rie de comandos salvos em um arquivo. Eles s\u00e3o \u00fateis para mantermos a reprodutividade do c\u00f3digo, portanto, sempre que formos utilziar o RStudio \u00e9 recomendado escrever um script. Podemos ent\u00e3o come\u00e7ar a escrever nossas primeiras linhas de c\u00f3digo! Abrindo um script \u00b6 1- Podemos come\u00e7ar um novo script do zero 2 - Ou podemos abrir um script que j\u00e1 foi trabalhado File \u2192 Open file \u2192 Aula1.R Aten\u00e7\u00e3o \u00e0 extens\u00e3o .R Num script tem linhas de comando e tamb\u00e9m linhas de coment\u00e1rios. Para marcarmos coment\u00e1rios basta colocarmos # Dessa forma, o R n\u00e3o executar\u00e1 o que est\u00e1 escrito depois das aspas Algumas regras de boa conduta \u00b6 N\u00e3o escreva diretamente no console. Salve o seu c\u00f3digo sempre em um script. Assim conseguimos salvor todas as decis\u00f5es tomadas durante uma an\u00e1lise e pertmir com que uma outra pessoa tamb\u00e9m chegue nos resultados que obtivermos. Nunca sobreponha o banco de dados. Uma vez que voc\u00ea tem um script , n\u00e3o \u00e9 preciso salvar as altera\u00e7\u00f5es j\u00e1 que voc\u00ea ser\u00e1 capaz de reproduzir os resultados no futuro. Comente o seu c\u00f3digo. Lembre-se que outras pessoas ir\u00e3o ler o seu c\u00f3digo e que elas n\u00e3o fazem ideia do que passava na sua cabe\u00e7a quando voc\u00ea tomou algumas decis\u00f5es. Al\u00e9m disso, o seu eu do futuro ir\u00e1 agredecer um c\u00f3digo bem documentado caso seja necess\u00e1rio revisit\u00e1-lo. Nossas primeiras linhas de c\u00f3digo \u00b6 Uma das funcionalidades mais b\u00e1sicas do R \u00e9 realiza\u00e7\u00e3o de opera\u00e7\u00f5es matem\u00e1ticas. Se estamos digitando os comandos em um script , basta colocarmos o cursor do mouse na linha do c\u00f3digo e apertar Ctrl + Enter e o resultado sair\u00e1 no Console, assim como j\u00e1 hav\u00edamos mencionado. 3 + 1 # Soma 3 - 2 # Subtra\u00e7\u00e3o 4 * 2 # Multiplica\u00e7\u00e3o 5 / 2 # Divis\u00e3o Objetos e atribui\u00e7\u00f5es I \u00b6 \u201cTo understand computations in R, two slogans are helpful: \u2022 Everything that exists is an object. \u2022 Everything that happens is a function call.\u201d \u2014 John Chambers Dados s\u00e3o guardados dentro de objetos. Objetos possuem diferentes formas de estruturas os dados: Vetores Listas DataFrames Objetos podem conter diferentes tipos de dados: N\u00fameros Strings Fatores Atribuindo valores \u00e0 vari\u00e1veis ( <- ) \u00b6 Quando fizemos as opera\u00e7\u00f5es matem\u00e1ticas, n\u00e3o salvamos os nossos resultados. Logo, caso quis\u00e9ssemos acessar novamente, por exemplo, o resultado de 3 + 1 , seria necess\u00e1rio digitar novamente 3 + 1 e efetuar a opera\u00e7\u00e3o. Contudo, \u00e9 poss\u00edvel salvar os resultados em vari\u00e1veis e, ao fazer refer\u00eancia a essas vari\u00e1veis, obter outro resultado. 3 + 1 a <- 3 + 1 a * 2 b <- (\u201cHello, world\u201d) b dado <- c(1,2,3,4,5,6) dado Tipos de dados \u00b6 knitr::include_graphics(\"imgs/TipoDeDados.png\") Lidando com n\u00fameros \u00b6 De certa maneira, estamos muito acostumados com esse tipo de dados. Voc\u00ea consegue pensar em algum exemplo? Os minutos passados entre o momento que voc\u00ea saiu de casa e chegou nesta sala de aula \u00e9 exemplo. Al\u00e9m desse, podemso pensar na renda mensal da sua fam\u00edlia, na quantidade de livros que voc\u00ea possui e assim por diante. Tipos num\u00e9ricos podem ser divididos em inteiros ( integers ) e reais ( float ). Diferentemente de outras linguagens de programa\u00e7\u00e3o, voc\u00ea dificilmente ter\u00e1 que se preocupar com isso no R. 3 # numero inteiro 55.4 # numero real Lidando com texto \u00b6 Outro tipo de vari\u00e1vel muito conhecida \u00e9 o texto ou string . Para declaramos um texto no R podemos utilizar aspas simples ( '' ) ou aspas duplas ( \"\" ), mas lembre-se n\u00e3o podemos intercalar as aspas, como por exemplo, 'ol\u00e1 mundo\" . \"Vargas\" 'Janio Quadros' \"1945\" Perceba que devido ao fato de 1945 estar entre aspas, ele n\u00e3o \u00e9 mais um dado do tipo n\u00famero, mas sim texto. Lidando com fatores \u00b6 Vamos supor que estamos trabalhando com dados de survey e em uma das quest\u00f5es temos a escala likert, em que as respostas v\u00e3o do \u201cDiscordo totalmente\u201d at\u00e9 o \u201cConcordo totalmente\u201d contabilizando um total de 6 categorias de resposta. Ocorre que para que o R entenda este tipo de dado como algo categ\u00f3rico, precisamos transform\u00e1-los em fatores (factors). Para fazer essa transforma\u00e7\u00e3o, utilizaremos uma fun\u00e7\u00e3o chamada factor() que recebe como par\u00e2metro um vetor com o que queremos transformar em categorias. factor(c(\"Discordo totalmente\", \"Discordo parcialmente\", \"Indiferente\", \"Concordo parcialmente\", \"Concordo totalmente\")) Diferente de quando executamos um dado tipo texto, os dados categ\u00f3ricos apresentam os n\u00edveis das categorias (levels). Perceba que as nossas categorias n\u00e3o est\u00e3o de acordo com o que a escala likert pressup\u00f5e e para arrumar este problema, precisamos definir os n\u00edveis atrav\u00e9s de um outro par\u00e2metro da fun\u00e7\u00e3o factor() chamado levels = . factor(c(\"Discordo totalmente\", \"Discordo parcialmente\", \"Indiferente\", \"Concordo parcialmente\", \"Concordo totalmente\"), levels = c(\"Discordo totalmente\", \"Discordo parcialmente\", \"Indiferente\", \"Concordo parcialmente\", \"Concordo totalmente\")) Pode parecer um pouco confuso agora, mas iremos esclarecer estes pontos nos pr\u00f3ximos t\u00f3picos. Lidando com data e tempo \u00b6 Muitas vezes precisamos lidar com data, como por exemplo, filtrar nossa an\u00e1lise em um intervalo de tempo. Por\u00e9m, n\u00fameros e textos n\u00e3o s\u00e3o suficientes para entender as regras impostas pelas datas, como por exemplo, \u201c01/01/2019\u201d \u00e9 mais recente que \u201c31/12/2018\u201d. Iremos explorar esse assunto mais pra frente, pois existem formas mais eficientes de trabalhar com este tipo de dado, de qualquer forma um dado tipo data se apresenta da seguinte forma: Sys.Date() Parece uma vari\u00e1vel texto, n\u00e3o? Por\u00e9m se aplicarmos a fun\u00e7\u00e3o str() , que serve para vermos qual \u00e9 o tipo do dado veremos que, str(Sys.Date()) Lidando com l\u00f3gicos/booleanos \u00b6 Valores booleanos s\u00e3o resultados de opera\u00e7\u00f5es booleanas e podem ser definidos como verdadeiros ou falsos . Por conven\u00e7\u00e3o, trabalhamos com os termos em ingl\u00eas. Portanto, TRUE ou FALSE . Por opera\u00e7\u00f5es booleanas, podemos pensar em diferentes testes que tenham necessariamente uma resposta ou verdadeira ou falsa. Por exemplo, 3 \u00e9 maior do que 1? Verdadeiro! E 3 \u00e9 menor do que 2? Falso! Vamos realizar essas duas opera\u00e7\u00f5es no R. # 3 \u00e9 maior do que 1? 3 > 1 # 3 \u00e9 maior do que 1? 3 < 2 Existem, obviamente, outras opera\u00e7\u00f5es. \u00c9 poss\u00edvel tamb\u00e9m testar a igualdade entre dois valores com == . # 2 \u00e9 igual a 2? 2 == 2 Tamb\u00e9m podemos testar se dois valores s\u00e3o diferentes. #120 \u00e9 diferente de 20? 120 != 20 Outras varia\u00e7\u00f5es utilizadas s\u00e3o o maior ou igual ( >= ) e o menor ou igual ( <= ). Al\u00e9m disso, tamb\u00e9m \u00e9 poss\u00edvel realizar essas opera\u00e7\u00f5es com textos. # \"harvard\" \u00e9 igual a \"MIT\"? \"Harvard\" == \"MIT\" N\u00e3o iremos introduzir essa ideia aqui, mas caso seja de interesse tamb\u00e9m podemos utilizar as no\u00e7\u00f5es de maior e menor para textos. Voc\u00ea teria um palpite de como um texto pode ser maior do que outro? Valores ausentes/ missings \u00b6 O que s\u00e3o missings e por que existe um valor especial para eles? Existem dois tipos de valores missing, o NA (not avaible) e o NaN (not a number), ambos tem sentidos semelhantes, por\u00e9m o primeiro \u00e9 mais gen\u00e9rico para cada tipo de dado. Para sabermos se um certo dado \u00e9 missing, utilizamos a fun\u00e7\u00e3o is.na() . is.na(NA) is.na(99) Exerc\u00edcios \u00b6 Parte A: Tipos de dados \u00b6 Marque verdadeiro ou falso. Caso verdadeiro, informe o tipo de dado: Obs: Caso apare\u00e7a \u201c+\u201d no seu console ao testar as afirma\u00e7\u00f5es, basta apertar \u201cEsc\u201d 33,5 \"Ol\u00e1 mundo\" \"O 'R' \u00e9 uma linguagem legal\" \"O 'R \u00e9 uma linguagem legal\" \"O 'R \u00e9 uma linguagem legal' 400e+10 factor(\"oi\", levels = c(\"oi\", \"tchau\")) TRUE FALSE Estrutura de dados \u00b6 As estruturas de dados s\u00e3o maneiras de organizar e guardar dados dentro da linguagem para que possamos trabalhar de forma mais eficiente. No nosso cotidiano utilizaremos tr\u00eas destas estruturas: vetores , listas e dataframes . Essas tr\u00eas estruturas podem ser dividas entre homog\u00eaneas e heterog\u00eanas. Mas o que isso significa? Basicamente diz respeito a quantidade de tipos de dados que ela pode receber, isto \u00e9, estruturas homog\u00eaneas s\u00f3 podem receber um tipo de dado, enquanto as estruturas heterog\u00eaneas podem receber mais de um tipo de dado. Vetores (at\u00f4micos) \u00b6 Um vetor at\u00f4mico \u00e9 a estrutura mais b\u00e1sica no R; \u00e9 um vetor de dados homog\u00eaneo com apenas uma dimens\u00e3o. Uma analogia interessante para entendermos um vetor at\u00f4mico \u00e9 a seguinte: knitr::include_graphics(\"imgs/r_data_structures.png\") Que tal um exemplo? Imagine que voc\u00ea queira organizar em um vetor a quantidade de pessoas dentro de vag\u00f5es de um trem. Nesse sentido, a quantidade de pessoas no primeira vag\u00e3o \u00e9 seguida da quantidade de pessoas no segundo e assim por diante. c(120, 29, 191, 18, 39) Quantas pessoas est\u00e3o no segundo vag\u00e3o? 29? Acertou! Perceba ent\u00e3o que para construir um vetor basta colocarmos os valores dentro de c() . Indexando vetores \u00b6 Dado que criamos objetos, podemos acessar os valores espec\u00edficos a partir da posi\u00e7\u00e3o dentro do vetor. No exemplo anterior, voc\u00ea poderia ter pedido para o R lhe responder quem est\u00e1 na segunda posi\u00e7\u00e3o. Como fazer isso? basta salvar o vetor em uma vari\u00e1vel e color [2] trem <- c(120, 29, 191, 18, 39) trem[1] Para indexarmos mais de um elemento podemos indexar de duas formas. Logo se quis\u00e9ssemos o n\u00famero de pessoas no terceiro e quarto vag\u00e3o: trem[c(3,4)] trem[3:4] O que acontece se voc\u00ea utilizar [3:5] ? trem[3:5] Listas \u00b6 Em geral, dificilmente utilizamos as listas de maneira pura. Contudo, entender o funcionamento dela \u00e9 essencial para pegar os fundamentos de uma outra estrutura de dados. Vamos montar um guarda-roupa com tr\u00eas gavetas: Primeira gaveta: 3 meias Segunda gaveta: 5 camisetas com logotipo que vai de 1 at\u00e9 5 Terceira gaveta: uma caixa com dois rel\u00f3gios Uma forma de representar este guarda-roupa \u00e9 por meio de uma lista! lista <- list(c(\"Meia 1\", \"Meia 2\", \" Meia 3\"), c(1, 2, 3, 4, 5), list(c(\"Relogio 1\", \"Relogio 2\"))) Listas s\u00e3o parecidas com vetores at\u00f4micos, por\u00e9m elas podem conter vetores de qualquer tipo (num\u00e9ricos, l\u00f3gicos, texto) e at\u00e9 mesmo outras listas. Indexando \u00b6 Apesar de parecido com um vetor at\u00f4mico, a indexa\u00e7\u00e3o tem alguns aspectos diferentes! Quando indexamos um vetor, obtemos o elemento a partir de [] em que dentro colocamos a posi\u00e7\u00e3o de interesse, por\u00e9m, se fizermos o mesmo com a lista \u00e9 como se abr\u00edssemos apenas a gaveta, mas n\u00e3o acessamos o que est\u00e1 dentro dela. Ou seja, para acessar o elemento da lista precisamos utilizar [[]] . lista[1] # Obtendo a posicao da lista lista[[1]] # Obtendo os elementos da lista lista[[1]][1] lista[[3]][[1]] # Obtendo o elemento da lista dentro de outra lista Dataframes \u00b6 Se voc\u00ea j\u00e1 utilizou uma planilha de Excel o DataFrame n\u00e3o possui quase nada de diferente. Assim como as listas, data frames s\u00e3o estruturas de dados heterog\u00eaneas. Voc\u00ea saberia dizer por que? tabela <- data.frame(presidente_eleito = c(\"Dutra\", \"Vargas\", \"JK\", \"Janio Quadros\"), porcentagem = c(55.39, 48.73, 35.68, 48.26), vitoria_uf = c(23, 17, 15, 16), vice_igual_presid = c(TRUE, FALSE, FALSE, FALSE)) tabela Dataframes \u00b6 Diferentemente do Excel, n\u00e3o podemos selecionar uma c\u00e9lula e alterar um dado. No R, para manipular e visualizar uma tabela precisamos utilizar fu\u00e7\u00f5es. N\u00e3o se estresse caso nunca tenho ouvido falar delas. Pense apenas que elas realizam alguma a\u00e7\u00e3o . Repare nos resultados das fun\u00e7\u00f5es a seguir: View(tabela) # mostra o banco no console head (tabela) # mostra as seis primeiras linhas do banco no console str(tabela)# mostra a estrutura da tabela names(tabela) # mostra o nome das vari\u00e1veis nrow(tabela) # n\u00ba de linhas ncol(tabela) #n\u00ba de colunas dim(tabela) # dimens\u00f5es Indexando \u00b6 Assim como data frames, a indexa\u00e7\u00e3o tamb\u00e9m tem mais de uma dimens\u00e3o, isto \u00e9, primeiro indexamos a linha e depois a coluna, como por exemplo: tabela[1, 2] # Primeira linha, segunda coluna tabela[1,] # Primeira linha, todas as colunas tabela[,1] # Todas as linhas, primeira coluna tabela[1:3,] # Linhas de 1 at\u00e9 3, todas as colunas tabela[,2:4] # todas as linhas, colunas de 2 at\u00e9 4 Como estamos lidando com tabelas tamb\u00e9m podemos indexar com o nome das colunas tabela[,\"porcentagem\"] tabela[2,\"porcentagem\"] Por fim tamb\u00e9m podemos indexar utilizando o operador $ seguido do nome da coluna. tabela$presidente_eleito tabela$vice_igual_presid[1] Exerc\u00edcio 1 \u00b6 Crie um dataframe com o nome, idade e filme preferido dos seus colegas de turma. Fa\u00e7a um script que documente o passo a passo da cria\u00e7\u00e3o do dta frame Crie uma lista composta por 3 elementos. Fa\u00e7a um script que documente o passo a passo da cria\u00e7\u00e3o do dta frame Como podemos saber o conte\u00fado do segundo elemento da lista. Utilze a indexa\u00e7\u00e3o Exerc\u00edcio 2 \u00b6 No R temos, bancos para fins did\u00e1ticos. Para utiliz\u00e1-los basta usar a fun\u00e7\u00e3o data. Para esse exerc\u00edcios utilizaremos o banco mtcars data(mtcars) 1. Visualize o banco. Do que se trata? 2. Quais s\u00e3o suas vari\u00e1veis? 3. E suas dimens\u00f5es? 4. Selecione as 10 primeiras observa\u00e7\u00f5es Fun\u00e7\u00f5es \u00b6 Como voc\u00ea deve ter notado mencionamos algumas vezes a palavra fun\u00e7\u00e3o/fun\u00e7\u00f5es, mas o que \u00e9 isso? Podemos pensar cada fun\u00e7\u00e3o como uma a\u00e7\u00e3o a ser realizada, como por exemplo, transforme os dados em fatores ( factor() ) ou realize a m\u00e9dia ( mean() ) de um conjunto de dados n\u00famericos. Ou seja, uma fun\u00e7\u00e3o \u00e9 um conjunto de instru\u00e7\u00f5es que realizam uma tarefa especifica, podendo carregar com par\u00e2metros a serem preenchidos pelo usu\u00e1rio ou n\u00e3o. Vamos pensar na fun\u00e7\u00e3o strsplit() ! Ok, se voc\u00ea nunca programou antes talvez n\u00e3o saiba o que ela faz\u2026 Para isso existe o que n\u00f3s chamamos de documenta\u00e7\u00e3o, um local que nos explica qual \u00e9 a \u201ca\u00e7\u00e3o\u201d que a fun\u00e7\u00e3o realiza e os par\u00e2metros que ela aceita. # Para ver a documenta\u00e7\u00e3o de uma fun\u00e7\u00e3o ?strsplit() Se observarmos o t\u00f3pico \u201cUsage\u201d veremos o seguinte: strsplit(x, split, fixed = FALSE, perl = FALSE, useBytes = FALSE) O x e o split s\u00e3o argumentos que devem ser obrigat\u00f3riamente preenchidos, o restante j\u00e1 esta preenchido por padr\u00e3o (tamb\u00e9m falamos default). Vamos ver um exemplo, strsplit(x = \"Aprender sobre funcoes pode ser divertido\", split = \" \") Como os argumentos possuem posi\u00e7\u00f5es n\u00e3o precisamos necessariamente ficar escrevendo x = ou split = . strsplit(\"Aprender sobre funcoes pode ser divertido\", \" \") Se voc\u00ea tiver mais interesse em saber sobre fun\u00e7\u00f5es clique aqui! Pacotes \u00b6 Segundo a defini\u00e7\u00e3o do livro R Packages, escrito por Hadley Wickham, um pacote \u00e9 uma unidade fundamental de compartilhamento de c\u00f3digos, dados, documenta\u00e7\u00e3o e testes. Em outras palavras, os pacotes s\u00e3o cole\u00e7\u00f5es de c\u00f3digos (fun\u00e7\u00f5es) e dados desenvolvidos pela comunidade. Estes pacotes ficam localizados no que chamamos de reposit\u00f3rio. O principal reposit\u00f3rio recebe o nome de C omprehensive R A rchive N etwork, o tamb\u00e9m chamado, CRAN. Mas existem outros tamb\u00e9m, como o Github, no qual a forma de obter os pacotes muda. Mas como instalamos um pacote no R? A resposta \u00e9 simples, utilizamos uma fun\u00e7\u00e3o chamada install.packages() em que o argumento principal \u00e9 o nome do pacote que queremos instalar. Uma peculiaridade desta fun\u00e7\u00e3o \u00e9 que por padr\u00e3o ela instala os pacotes que est\u00e3o no CRAN, como por exemplo, vamos instalar um pacote chamado \u201cdplyr\u201d install.packages(\"dplyr\") Ap\u00f3s instalarmos o pacote, devemos habilit\u00e1-lo com uma fun\u00e7\u00e3o chamada library() library(dplyr) Caso o pacote n\u00e3o esteja no CRAN, mas sim no Github, devemos instalar o pacote com o auxilio de uma fun\u00e7\u00e3o chamada install_github() do pacote devtools . install.packages(\"devtools\") library(devtools) install_github(\"abjur/abjutils\") library(abjutils) Controladores de Fluxo \u00b6 \u00c9 muito comum estabelecermos uma condi\u00e7\u00e3o para tomar uma decis\u00e3o, como por exemplo, \u2018Porcentagem de votos maior que 50% pode significar vit\u00f3ria, caso contr\u00e1rio, derrota\u2019. Al\u00e9m disso, muitas vezes precisamos percorrer diversos valores, como por exemplo, para cada elei\u00e7\u00e3o verificamos se o presidente eleito teve mais de 50% dos votos. Para que possamos fazer isso, utilizaremos o if/else e o for ! if/else \u00b6 A estrutura do if/else \u00e9 a seguinte: if(<condicao>){ <comando1> <comando2> <etc> }else{ <comando3> <comando4> <etc> } Podemos interpret\u00e1-la da seguinte maneira: Se a condi\u00e7\u00e3o for verdadeira, execute os comandos 1 e 2, caso contr\u00e1rio, execute os comandos 3 e 4. Pensando em algo menos abstrato podemos dizer que caso o candidato para o pletio tenha recebido mais de 50% dos votos, ele est\u00e1 eleito, caso contr\u00e1rio, ele perdeu a elei\u00e7\u00e3o. porcentagem_de_votos <- 55 if(porcentagem_de_votos > 50){ print(\"Eleito\") } else { print(\"N\u00e3o eleito\") } for \u00b6 Vamos criar o seguinte dataframe : ano : ano da observa\u00e7\u00e3o. pais : pa\u00eds da observa\u00e7\u00e3o. pip : Produto Interno Bruto do pa\u00eds. pop : Popula\u00e7\u00e3o do pa\u00eds. tabela <- data.frame(ano = c(2014, 2014, 2015, 2015, 2016, 2016), pais = c('Brasil', 'China', 'Brasil', 'China', 'Brasil', 'China'), pip = c(100,130, 110, 140, 160, 170), pop = c(3, 8, 4, 9, 6, 14)) Nosso objetivo: Criar uma terceira coluna com o pip per capta com um for Mas o que \u00e9 um for ? for (i in x){ <comando1> <comando2> } N\u00f3s lemos o for acima da seguinte maneira: Para cada valor \u201ci\u201d presente na sequ\u00eancia \u201cx\u201d, realize tais comandos. Ou seja, para cada linha da nossa tabela, some um ao percentual de votos recebidos. for(i in 1:nrow(tabela)){ print(tabela$porcentagem_de_votos[i] + 1) } Vamos entender algumas coisas aqui, nrow(tabela) \u00e9 uma fun\u00e7\u00e3o que retorna o n\u00famero de linhas de uma tabela, ou seja, seu resultado \u00e9 um n\u00famero. Quando temos 1:nrow(tabela) , estamos criando um vetor com uma sequ\u00eancia de 1 at\u00e9 o n\u00famero de linhas da nossa tabela, no caso, 6. Isso significa que nosso for vai percorrer as treze linhas da tabela. o i assumir\u00e1 os valores de 1 at\u00e9 13, por isso utilizamos tabela$porcentagem_de_votos[i], ou seja, estamos indexando as tabelas pelos valores que i assume. Vamos agora voltar ao nosso objetivo principal: Criar uma coluna chamada categoria_voto, na qual, se o voto para a disputa presidencial for maior que 70% chamaremos de \u2018super majorit\u00e1rio\u2019, caso contr\u00e1rio, chamaremos de \u2018normal\u2019. Caso a disputa seja para o governo do estados iremos considerar como \u2018super majorit\u00e1rio\u2019 um percentual maior que 80%. tabela$categoria_voto <- NA # Criando uma coluna vazia for(i in 1:nrow(tabela)){ if(tabela$tipo_disputa[i] == \"Presidencia\"){ if(tabela$porcentagem_de_votos[i] >= 70){ tabela$categoria_voto[i] <- \"super majoritario\" } else { tabela$categoria_voto[i] <- \"normal\" } } else { if(tabela$porcentagem_de_votos[i] >= 80){ tabela$categoria_voto[i] <- \"super majoritario\" } else { tabela$categoria_voto[i] <- \"normal\" } } } print(tabela) Exerc\u00edcios \u00b6 Parte A: Tipos de dados \u00b6 Exercicio 1 \u00b6 Execute os c\u00f3digos abaixo e verifique se s\u00e3o dados v\u00e1lidos em R. Caso verdadeiro, informe o tipo de dado: Obs: Caso apare\u00e7a \u201c+\u201d no seu console ao testar as afirma\u00e7\u00f5es, basta apertar \u201cEsc\u201d 33,5 \"Ol\u00e1 mundo\" \"O 'R' \u00e9 uma linguagem legal\" \"O 'R \u00e9 uma linguagem legal\" \"O 'R \u00e9 uma linguagem legal' 400e+10 factor(\"oi\", levels = c(\"oi\", \"tchau\")) true False Exercicio 2 \u00b6 Altere o valor de v_numero para 42 v_numero <- 42.5 Altere o valor de v_caractere para \u201cuniverso\u201d. v_caractere <- \"algum texto\"` Altere o valor de v_logical para FALSE `v_logical <- TRUE` Parte B: Estrutura de dados \u00b6 Exercicio 1 \u00b6 Crie um dataframe dos quatro primeiros candidatos com as seguintes informa\u00e7\u00f5es: Nome, Partido, N\u00famero de Votos e Porcentagem de Votos com base na imagem imgs/1turno.jpg. Usando a indexa\u00e7\u00e3o, obtenha: Todas as informa\u00e7\u00f5es do candidato Ciro Gomes O partido de todos candidatos Todas as informa\u00e7\u00f5es dos dois primeiros colocados Obtenha: A m\u00e9dia de votos de todos os candidatos A soma de votos dos dois primeiros candidatos O desvio padr\u00e3o dos votos Parte C: Controladores de fluxo \u00b6 Exercicio 1 \u00b6 Execute o c\u00f3digo em data/eleicoes_sp.R para criar o data frame para o exerc\u00edcio. O data frame \u00e9 o resultado da elei\u00e7\u00e3o do 1\u00ba turno de 2018 para governador do estado de S\u00e3o Paulo. Utilizando o la\u00e7o FOR e o condicional IF/ELSE, crie uma coluna no data frame com o nome \u201cporcentagem_votos\u201d em que indique a porcentagem de votos obtida por cada candidato. Crie outra coluna com o nome \u201cresultado\u201d. O valor dessa coluna deve assumir o valor \"Eleito\" caso o candidato obteve mais de 50% dos votos. Caso nenhum candidato obteve essa porcentagem, os dois candidatos com maior porcentagem de votos devem ter a coluna com o valor \"2\u00ba turno\" e os demais como \"N\u00e3o Eleito\" . Crie um script que utilize o la\u00e7o for e o if / else para verificar as duas situa\u00e7\u00f5es.","title":"01 introducao"},{"location":"01_introducao/#introducao-ao-r-e-ao-rstudio","text":"","title":"Introdu\u00e7\u00e3o ao R e ao RStudio"},{"location":"01_introducao/#1-o-que-e-o-r-e-o-rstudio","text":"","title":"1. O que \u00e9 o R e o RStudio?"},{"location":"01_introducao/#11-linguagem-de-programacao-r","text":"O R \u00e9 uma linguagem de programa\u00e7\u00e3o que vem crescendo bastante nos \u00faltimos anos. Apesar de inicialmente ter como p\u00fablico estat\u00edsticos, a linguagem \u00e9 uma das mais utilizadas para an\u00e1lise de dados nas mais diferentes frentes. A flexibilidade trazido por uma \u00ednumera quantidade de pacotes permite lidar n\u00e3o s\u00f3 com tabelas estilo Excel, mas tamb\u00e9m com texto, imagens, etc. Quando baixamos o R pela primera vez nos assustamos com a sua interface, pois ela n\u00e3o \u00e9 das mais agrad\u00e1veis. knitr::include_graphics(\"imgs/r_console.png\") Para solucionar isto e adicionar outras funcionalidades que melhoram a experi\u00eancia de quem utiliza a linguagem, foi desenvolvido uma IDE (Ambiente de desenvolvimento integrado) chamada RStudio .","title":"1.1. Linguagem de programa\u00e7\u00e3o R"},{"location":"01_introducao/#11-rstudio","text":"O RStudio nada mais \u00e9 que um software, que integrado com o R, permite uma intera\u00e7\u00e3o melhor com os objetos e rotinas criados com o R. O programa tem quatro pain\u00e9is/se\u00e7\u00f5es: knitr::include_graphics(\"imgs/rstudio_print.png\") A - Console: Local na qual temos o R prompt e que podemos executar linha por linha (chamados de inputs). Al\u00e9m disso, \u00e9 o local no qual os resultados (chamados de outputs) ir\u00e3o aparecer. B - File/Plots/Help: Nesta se\u00e7\u00e3o podemos ter acesso \u00e0s pastas que estamos utilizando durante as nossas rotinas no software, al\u00e9m de visualizar os gr\u00e1ficos gerados a partir das an\u00e1lises e verificar a documenta\u00e7\u00e3o de fun\u00e7\u00f5es e pacotes, que explicaremos em breve. C - Workspace: Os valores gerados no R, como por exemplo, vari\u00e1veis e tabelas que voc\u00ea definiu ir\u00e3o aparecer aqui, sobretudo, na aba Environment. E o hist\u00f3rico de c\u00f3digos rodados na aba History. Veremos nas pr\u00f3ximas aulas que a aba Connections \u00e9 \u00fatil caso estejamos conectados com alguma base de dados externa, como por exemplo, Access ou PostgreSQL. D - Editor: Aqui \u00e9 onde os scripts s\u00e3o escritos. Scripts nada mais s\u00e3o do que uma s\u00e9rie de comandos salvos em um arquivo. Eles s\u00e3o \u00fateis para mantermos a reprodutividade do c\u00f3digo, portanto, sempre que formos utilziar o RStudio \u00e9 recomendado escrever um script. Podemos ent\u00e3o come\u00e7ar a escrever nossas primeiras linhas de c\u00f3digo!","title":"1.1. RStudio"},{"location":"01_introducao/#abrindo-um-script","text":"1- Podemos come\u00e7ar um novo script do zero 2 - Ou podemos abrir um script que j\u00e1 foi trabalhado File \u2192 Open file \u2192 Aula1.R Aten\u00e7\u00e3o \u00e0 extens\u00e3o .R Num script tem linhas de comando e tamb\u00e9m linhas de coment\u00e1rios. Para marcarmos coment\u00e1rios basta colocarmos # Dessa forma, o R n\u00e3o executar\u00e1 o que est\u00e1 escrito depois das aspas","title":"Abrindo um script"},{"location":"01_introducao/#algumas-regras-de-boa-conduta","text":"N\u00e3o escreva diretamente no console. Salve o seu c\u00f3digo sempre em um script. Assim conseguimos salvor todas as decis\u00f5es tomadas durante uma an\u00e1lise e pertmir com que uma outra pessoa tamb\u00e9m chegue nos resultados que obtivermos. Nunca sobreponha o banco de dados. Uma vez que voc\u00ea tem um script , n\u00e3o \u00e9 preciso salvar as altera\u00e7\u00f5es j\u00e1 que voc\u00ea ser\u00e1 capaz de reproduzir os resultados no futuro. Comente o seu c\u00f3digo. Lembre-se que outras pessoas ir\u00e3o ler o seu c\u00f3digo e que elas n\u00e3o fazem ideia do que passava na sua cabe\u00e7a quando voc\u00ea tomou algumas decis\u00f5es. Al\u00e9m disso, o seu eu do futuro ir\u00e1 agredecer um c\u00f3digo bem documentado caso seja necess\u00e1rio revisit\u00e1-lo.","title":"Algumas regras de boa conduta"},{"location":"01_introducao/#nossas-primeiras-linhas-de-codigo","text":"Uma das funcionalidades mais b\u00e1sicas do R \u00e9 realiza\u00e7\u00e3o de opera\u00e7\u00f5es matem\u00e1ticas. Se estamos digitando os comandos em um script , basta colocarmos o cursor do mouse na linha do c\u00f3digo e apertar Ctrl + Enter e o resultado sair\u00e1 no Console, assim como j\u00e1 hav\u00edamos mencionado. 3 + 1 # Soma 3 - 2 # Subtra\u00e7\u00e3o 4 * 2 # Multiplica\u00e7\u00e3o 5 / 2 # Divis\u00e3o","title":"Nossas primeiras linhas de c\u00f3digo"},{"location":"01_introducao/#objetos-e-atribuicoes-i","text":"\u201cTo understand computations in R, two slogans are helpful: \u2022 Everything that exists is an object. \u2022 Everything that happens is a function call.\u201d \u2014 John Chambers Dados s\u00e3o guardados dentro de objetos. Objetos possuem diferentes formas de estruturas os dados: Vetores Listas DataFrames Objetos podem conter diferentes tipos de dados: N\u00fameros Strings Fatores","title":"Objetos e atribui\u00e7\u00f5es I"},{"location":"01_introducao/#atribuindo-valores-a-variaveis-lt-","text":"Quando fizemos as opera\u00e7\u00f5es matem\u00e1ticas, n\u00e3o salvamos os nossos resultados. Logo, caso quis\u00e9ssemos acessar novamente, por exemplo, o resultado de 3 + 1 , seria necess\u00e1rio digitar novamente 3 + 1 e efetuar a opera\u00e7\u00e3o. Contudo, \u00e9 poss\u00edvel salvar os resultados em vari\u00e1veis e, ao fazer refer\u00eancia a essas vari\u00e1veis, obter outro resultado. 3 + 1 a <- 3 + 1 a * 2 b <- (\u201cHello, world\u201d) b dado <- c(1,2,3,4,5,6) dado","title":"Atribuindo valores \u00e0 vari\u00e1veis (&lt;-)"},{"location":"01_introducao/#tipos-de-dados","text":"knitr::include_graphics(\"imgs/TipoDeDados.png\")","title":"Tipos de dados"},{"location":"01_introducao/#lidando-com-numeros","text":"De certa maneira, estamos muito acostumados com esse tipo de dados. Voc\u00ea consegue pensar em algum exemplo? Os minutos passados entre o momento que voc\u00ea saiu de casa e chegou nesta sala de aula \u00e9 exemplo. Al\u00e9m desse, podemso pensar na renda mensal da sua fam\u00edlia, na quantidade de livros que voc\u00ea possui e assim por diante. Tipos num\u00e9ricos podem ser divididos em inteiros ( integers ) e reais ( float ). Diferentemente de outras linguagens de programa\u00e7\u00e3o, voc\u00ea dificilmente ter\u00e1 que se preocupar com isso no R. 3 # numero inteiro 55.4 # numero real","title":"Lidando com n\u00fameros"},{"location":"01_introducao/#lidando-com-texto","text":"Outro tipo de vari\u00e1vel muito conhecida \u00e9 o texto ou string . Para declaramos um texto no R podemos utilizar aspas simples ( '' ) ou aspas duplas ( \"\" ), mas lembre-se n\u00e3o podemos intercalar as aspas, como por exemplo, 'ol\u00e1 mundo\" . \"Vargas\" 'Janio Quadros' \"1945\" Perceba que devido ao fato de 1945 estar entre aspas, ele n\u00e3o \u00e9 mais um dado do tipo n\u00famero, mas sim texto.","title":"Lidando com texto"},{"location":"01_introducao/#lidando-com-fatores","text":"Vamos supor que estamos trabalhando com dados de survey e em uma das quest\u00f5es temos a escala likert, em que as respostas v\u00e3o do \u201cDiscordo totalmente\u201d at\u00e9 o \u201cConcordo totalmente\u201d contabilizando um total de 6 categorias de resposta. Ocorre que para que o R entenda este tipo de dado como algo categ\u00f3rico, precisamos transform\u00e1-los em fatores (factors). Para fazer essa transforma\u00e7\u00e3o, utilizaremos uma fun\u00e7\u00e3o chamada factor() que recebe como par\u00e2metro um vetor com o que queremos transformar em categorias. factor(c(\"Discordo totalmente\", \"Discordo parcialmente\", \"Indiferente\", \"Concordo parcialmente\", \"Concordo totalmente\")) Diferente de quando executamos um dado tipo texto, os dados categ\u00f3ricos apresentam os n\u00edveis das categorias (levels). Perceba que as nossas categorias n\u00e3o est\u00e3o de acordo com o que a escala likert pressup\u00f5e e para arrumar este problema, precisamos definir os n\u00edveis atrav\u00e9s de um outro par\u00e2metro da fun\u00e7\u00e3o factor() chamado levels = . factor(c(\"Discordo totalmente\", \"Discordo parcialmente\", \"Indiferente\", \"Concordo parcialmente\", \"Concordo totalmente\"), levels = c(\"Discordo totalmente\", \"Discordo parcialmente\", \"Indiferente\", \"Concordo parcialmente\", \"Concordo totalmente\")) Pode parecer um pouco confuso agora, mas iremos esclarecer estes pontos nos pr\u00f3ximos t\u00f3picos.","title":"Lidando com fatores"},{"location":"01_introducao/#lidando-com-data-e-tempo","text":"Muitas vezes precisamos lidar com data, como por exemplo, filtrar nossa an\u00e1lise em um intervalo de tempo. Por\u00e9m, n\u00fameros e textos n\u00e3o s\u00e3o suficientes para entender as regras impostas pelas datas, como por exemplo, \u201c01/01/2019\u201d \u00e9 mais recente que \u201c31/12/2018\u201d. Iremos explorar esse assunto mais pra frente, pois existem formas mais eficientes de trabalhar com este tipo de dado, de qualquer forma um dado tipo data se apresenta da seguinte forma: Sys.Date() Parece uma vari\u00e1vel texto, n\u00e3o? Por\u00e9m se aplicarmos a fun\u00e7\u00e3o str() , que serve para vermos qual \u00e9 o tipo do dado veremos que, str(Sys.Date())","title":"Lidando com data e tempo"},{"location":"01_introducao/#lidando-com-logicosbooleanos","text":"Valores booleanos s\u00e3o resultados de opera\u00e7\u00f5es booleanas e podem ser definidos como verdadeiros ou falsos . Por conven\u00e7\u00e3o, trabalhamos com os termos em ingl\u00eas. Portanto, TRUE ou FALSE . Por opera\u00e7\u00f5es booleanas, podemos pensar em diferentes testes que tenham necessariamente uma resposta ou verdadeira ou falsa. Por exemplo, 3 \u00e9 maior do que 1? Verdadeiro! E 3 \u00e9 menor do que 2? Falso! Vamos realizar essas duas opera\u00e7\u00f5es no R. # 3 \u00e9 maior do que 1? 3 > 1 # 3 \u00e9 maior do que 1? 3 < 2 Existem, obviamente, outras opera\u00e7\u00f5es. \u00c9 poss\u00edvel tamb\u00e9m testar a igualdade entre dois valores com == . # 2 \u00e9 igual a 2? 2 == 2 Tamb\u00e9m podemos testar se dois valores s\u00e3o diferentes. #120 \u00e9 diferente de 20? 120 != 20 Outras varia\u00e7\u00f5es utilizadas s\u00e3o o maior ou igual ( >= ) e o menor ou igual ( <= ). Al\u00e9m disso, tamb\u00e9m \u00e9 poss\u00edvel realizar essas opera\u00e7\u00f5es com textos. # \"harvard\" \u00e9 igual a \"MIT\"? \"Harvard\" == \"MIT\" N\u00e3o iremos introduzir essa ideia aqui, mas caso seja de interesse tamb\u00e9m podemos utilizar as no\u00e7\u00f5es de maior e menor para textos. Voc\u00ea teria um palpite de como um texto pode ser maior do que outro?","title":"Lidando com l\u00f3gicos/booleanos"},{"location":"01_introducao/#valores-ausentes-missings","text":"O que s\u00e3o missings e por que existe um valor especial para eles? Existem dois tipos de valores missing, o NA (not avaible) e o NaN (not a number), ambos tem sentidos semelhantes, por\u00e9m o primeiro \u00e9 mais gen\u00e9rico para cada tipo de dado. Para sabermos se um certo dado \u00e9 missing, utilizamos a fun\u00e7\u00e3o is.na() . is.na(NA) is.na(99)","title":"Valores ausentes/ missings"},{"location":"01_introducao/#exercicios","text":"","title":"Exerc\u00edcios"},{"location":"01_introducao/#parte-a-tipos-de-dados","text":"Marque verdadeiro ou falso. Caso verdadeiro, informe o tipo de dado: Obs: Caso apare\u00e7a \u201c+\u201d no seu console ao testar as afirma\u00e7\u00f5es, basta apertar \u201cEsc\u201d 33,5 \"Ol\u00e1 mundo\" \"O 'R' \u00e9 uma linguagem legal\" \"O 'R \u00e9 uma linguagem legal\" \"O 'R \u00e9 uma linguagem legal' 400e+10 factor(\"oi\", levels = c(\"oi\", \"tchau\")) TRUE FALSE","title":"Parte A: Tipos de dados"},{"location":"01_introducao/#estrutura-de-dados","text":"As estruturas de dados s\u00e3o maneiras de organizar e guardar dados dentro da linguagem para que possamos trabalhar de forma mais eficiente. No nosso cotidiano utilizaremos tr\u00eas destas estruturas: vetores , listas e dataframes . Essas tr\u00eas estruturas podem ser dividas entre homog\u00eaneas e heterog\u00eanas. Mas o que isso significa? Basicamente diz respeito a quantidade de tipos de dados que ela pode receber, isto \u00e9, estruturas homog\u00eaneas s\u00f3 podem receber um tipo de dado, enquanto as estruturas heterog\u00eaneas podem receber mais de um tipo de dado.","title":"Estrutura de dados"},{"location":"01_introducao/#vetores-atomicos","text":"Um vetor at\u00f4mico \u00e9 a estrutura mais b\u00e1sica no R; \u00e9 um vetor de dados homog\u00eaneo com apenas uma dimens\u00e3o. Uma analogia interessante para entendermos um vetor at\u00f4mico \u00e9 a seguinte: knitr::include_graphics(\"imgs/r_data_structures.png\") Que tal um exemplo? Imagine que voc\u00ea queira organizar em um vetor a quantidade de pessoas dentro de vag\u00f5es de um trem. Nesse sentido, a quantidade de pessoas no primeira vag\u00e3o \u00e9 seguida da quantidade de pessoas no segundo e assim por diante. c(120, 29, 191, 18, 39) Quantas pessoas est\u00e3o no segundo vag\u00e3o? 29? Acertou! Perceba ent\u00e3o que para construir um vetor basta colocarmos os valores dentro de c() .","title":"Vetores (at\u00f4micos)"},{"location":"01_introducao/#indexando-vetores","text":"Dado que criamos objetos, podemos acessar os valores espec\u00edficos a partir da posi\u00e7\u00e3o dentro do vetor. No exemplo anterior, voc\u00ea poderia ter pedido para o R lhe responder quem est\u00e1 na segunda posi\u00e7\u00e3o. Como fazer isso? basta salvar o vetor em uma vari\u00e1vel e color [2] trem <- c(120, 29, 191, 18, 39) trem[1] Para indexarmos mais de um elemento podemos indexar de duas formas. Logo se quis\u00e9ssemos o n\u00famero de pessoas no terceiro e quarto vag\u00e3o: trem[c(3,4)] trem[3:4] O que acontece se voc\u00ea utilizar [3:5] ? trem[3:5]","title":"Indexando vetores"},{"location":"01_introducao/#listas","text":"Em geral, dificilmente utilizamos as listas de maneira pura. Contudo, entender o funcionamento dela \u00e9 essencial para pegar os fundamentos de uma outra estrutura de dados. Vamos montar um guarda-roupa com tr\u00eas gavetas: Primeira gaveta: 3 meias Segunda gaveta: 5 camisetas com logotipo que vai de 1 at\u00e9 5 Terceira gaveta: uma caixa com dois rel\u00f3gios Uma forma de representar este guarda-roupa \u00e9 por meio de uma lista! lista <- list(c(\"Meia 1\", \"Meia 2\", \" Meia 3\"), c(1, 2, 3, 4, 5), list(c(\"Relogio 1\", \"Relogio 2\"))) Listas s\u00e3o parecidas com vetores at\u00f4micos, por\u00e9m elas podem conter vetores de qualquer tipo (num\u00e9ricos, l\u00f3gicos, texto) e at\u00e9 mesmo outras listas.","title":"Listas"},{"location":"01_introducao/#indexando","text":"Apesar de parecido com um vetor at\u00f4mico, a indexa\u00e7\u00e3o tem alguns aspectos diferentes! Quando indexamos um vetor, obtemos o elemento a partir de [] em que dentro colocamos a posi\u00e7\u00e3o de interesse, por\u00e9m, se fizermos o mesmo com a lista \u00e9 como se abr\u00edssemos apenas a gaveta, mas n\u00e3o acessamos o que est\u00e1 dentro dela. Ou seja, para acessar o elemento da lista precisamos utilizar [[]] . lista[1] # Obtendo a posicao da lista lista[[1]] # Obtendo os elementos da lista lista[[1]][1] lista[[3]][[1]] # Obtendo o elemento da lista dentro de outra lista","title":"Indexando"},{"location":"01_introducao/#dataframes","text":"Se voc\u00ea j\u00e1 utilizou uma planilha de Excel o DataFrame n\u00e3o possui quase nada de diferente. Assim como as listas, data frames s\u00e3o estruturas de dados heterog\u00eaneas. Voc\u00ea saberia dizer por que? tabela <- data.frame(presidente_eleito = c(\"Dutra\", \"Vargas\", \"JK\", \"Janio Quadros\"), porcentagem = c(55.39, 48.73, 35.68, 48.26), vitoria_uf = c(23, 17, 15, 16), vice_igual_presid = c(TRUE, FALSE, FALSE, FALSE)) tabela","title":"Dataframes"},{"location":"01_introducao/#dataframes_1","text":"Diferentemente do Excel, n\u00e3o podemos selecionar uma c\u00e9lula e alterar um dado. No R, para manipular e visualizar uma tabela precisamos utilizar fu\u00e7\u00f5es. N\u00e3o se estresse caso nunca tenho ouvido falar delas. Pense apenas que elas realizam alguma a\u00e7\u00e3o . Repare nos resultados das fun\u00e7\u00f5es a seguir: View(tabela) # mostra o banco no console head (tabela) # mostra as seis primeiras linhas do banco no console str(tabela)# mostra a estrutura da tabela names(tabela) # mostra o nome das vari\u00e1veis nrow(tabela) # n\u00ba de linhas ncol(tabela) #n\u00ba de colunas dim(tabela) # dimens\u00f5es","title":"Dataframes"},{"location":"01_introducao/#indexando_1","text":"Assim como data frames, a indexa\u00e7\u00e3o tamb\u00e9m tem mais de uma dimens\u00e3o, isto \u00e9, primeiro indexamos a linha e depois a coluna, como por exemplo: tabela[1, 2] # Primeira linha, segunda coluna tabela[1,] # Primeira linha, todas as colunas tabela[,1] # Todas as linhas, primeira coluna tabela[1:3,] # Linhas de 1 at\u00e9 3, todas as colunas tabela[,2:4] # todas as linhas, colunas de 2 at\u00e9 4 Como estamos lidando com tabelas tamb\u00e9m podemos indexar com o nome das colunas tabela[,\"porcentagem\"] tabela[2,\"porcentagem\"] Por fim tamb\u00e9m podemos indexar utilizando o operador $ seguido do nome da coluna. tabela$presidente_eleito tabela$vice_igual_presid[1]","title":"Indexando"},{"location":"01_introducao/#exercicio-1","text":"Crie um dataframe com o nome, idade e filme preferido dos seus colegas de turma. Fa\u00e7a um script que documente o passo a passo da cria\u00e7\u00e3o do dta frame Crie uma lista composta por 3 elementos. Fa\u00e7a um script que documente o passo a passo da cria\u00e7\u00e3o do dta frame Como podemos saber o conte\u00fado do segundo elemento da lista. Utilze a indexa\u00e7\u00e3o","title":"Exerc\u00edcio 1"},{"location":"01_introducao/#exercicio-2","text":"No R temos, bancos para fins did\u00e1ticos. Para utiliz\u00e1-los basta usar a fun\u00e7\u00e3o data. Para esse exerc\u00edcios utilizaremos o banco mtcars data(mtcars) 1. Visualize o banco. Do que se trata? 2. Quais s\u00e3o suas vari\u00e1veis? 3. E suas dimens\u00f5es? 4. Selecione as 10 primeiras observa\u00e7\u00f5es","title":"Exerc\u00edcio 2"},{"location":"01_introducao/#funcoes","text":"Como voc\u00ea deve ter notado mencionamos algumas vezes a palavra fun\u00e7\u00e3o/fun\u00e7\u00f5es, mas o que \u00e9 isso? Podemos pensar cada fun\u00e7\u00e3o como uma a\u00e7\u00e3o a ser realizada, como por exemplo, transforme os dados em fatores ( factor() ) ou realize a m\u00e9dia ( mean() ) de um conjunto de dados n\u00famericos. Ou seja, uma fun\u00e7\u00e3o \u00e9 um conjunto de instru\u00e7\u00f5es que realizam uma tarefa especifica, podendo carregar com par\u00e2metros a serem preenchidos pelo usu\u00e1rio ou n\u00e3o. Vamos pensar na fun\u00e7\u00e3o strsplit() ! Ok, se voc\u00ea nunca programou antes talvez n\u00e3o saiba o que ela faz\u2026 Para isso existe o que n\u00f3s chamamos de documenta\u00e7\u00e3o, um local que nos explica qual \u00e9 a \u201ca\u00e7\u00e3o\u201d que a fun\u00e7\u00e3o realiza e os par\u00e2metros que ela aceita. # Para ver a documenta\u00e7\u00e3o de uma fun\u00e7\u00e3o ?strsplit() Se observarmos o t\u00f3pico \u201cUsage\u201d veremos o seguinte: strsplit(x, split, fixed = FALSE, perl = FALSE, useBytes = FALSE) O x e o split s\u00e3o argumentos que devem ser obrigat\u00f3riamente preenchidos, o restante j\u00e1 esta preenchido por padr\u00e3o (tamb\u00e9m falamos default). Vamos ver um exemplo, strsplit(x = \"Aprender sobre funcoes pode ser divertido\", split = \" \") Como os argumentos possuem posi\u00e7\u00f5es n\u00e3o precisamos necessariamente ficar escrevendo x = ou split = . strsplit(\"Aprender sobre funcoes pode ser divertido\", \" \") Se voc\u00ea tiver mais interesse em saber sobre fun\u00e7\u00f5es clique aqui!","title":"Fun\u00e7\u00f5es"},{"location":"01_introducao/#pacotes","text":"Segundo a defini\u00e7\u00e3o do livro R Packages, escrito por Hadley Wickham, um pacote \u00e9 uma unidade fundamental de compartilhamento de c\u00f3digos, dados, documenta\u00e7\u00e3o e testes. Em outras palavras, os pacotes s\u00e3o cole\u00e7\u00f5es de c\u00f3digos (fun\u00e7\u00f5es) e dados desenvolvidos pela comunidade. Estes pacotes ficam localizados no que chamamos de reposit\u00f3rio. O principal reposit\u00f3rio recebe o nome de C omprehensive R A rchive N etwork, o tamb\u00e9m chamado, CRAN. Mas existem outros tamb\u00e9m, como o Github, no qual a forma de obter os pacotes muda. Mas como instalamos um pacote no R? A resposta \u00e9 simples, utilizamos uma fun\u00e7\u00e3o chamada install.packages() em que o argumento principal \u00e9 o nome do pacote que queremos instalar. Uma peculiaridade desta fun\u00e7\u00e3o \u00e9 que por padr\u00e3o ela instala os pacotes que est\u00e3o no CRAN, como por exemplo, vamos instalar um pacote chamado \u201cdplyr\u201d install.packages(\"dplyr\") Ap\u00f3s instalarmos o pacote, devemos habilit\u00e1-lo com uma fun\u00e7\u00e3o chamada library() library(dplyr) Caso o pacote n\u00e3o esteja no CRAN, mas sim no Github, devemos instalar o pacote com o auxilio de uma fun\u00e7\u00e3o chamada install_github() do pacote devtools . install.packages(\"devtools\") library(devtools) install_github(\"abjur/abjutils\") library(abjutils)","title":"Pacotes"},{"location":"01_introducao/#controladores-de-fluxo","text":"\u00c9 muito comum estabelecermos uma condi\u00e7\u00e3o para tomar uma decis\u00e3o, como por exemplo, \u2018Porcentagem de votos maior que 50% pode significar vit\u00f3ria, caso contr\u00e1rio, derrota\u2019. Al\u00e9m disso, muitas vezes precisamos percorrer diversos valores, como por exemplo, para cada elei\u00e7\u00e3o verificamos se o presidente eleito teve mais de 50% dos votos. Para que possamos fazer isso, utilizaremos o if/else e o for !","title":"Controladores de Fluxo"},{"location":"01_introducao/#ifelse","text":"A estrutura do if/else \u00e9 a seguinte: if(<condicao>){ <comando1> <comando2> <etc> }else{ <comando3> <comando4> <etc> } Podemos interpret\u00e1-la da seguinte maneira: Se a condi\u00e7\u00e3o for verdadeira, execute os comandos 1 e 2, caso contr\u00e1rio, execute os comandos 3 e 4. Pensando em algo menos abstrato podemos dizer que caso o candidato para o pletio tenha recebido mais de 50% dos votos, ele est\u00e1 eleito, caso contr\u00e1rio, ele perdeu a elei\u00e7\u00e3o. porcentagem_de_votos <- 55 if(porcentagem_de_votos > 50){ print(\"Eleito\") } else { print(\"N\u00e3o eleito\") }","title":"if/else"},{"location":"01_introducao/#for","text":"Vamos criar o seguinte dataframe : ano : ano da observa\u00e7\u00e3o. pais : pa\u00eds da observa\u00e7\u00e3o. pip : Produto Interno Bruto do pa\u00eds. pop : Popula\u00e7\u00e3o do pa\u00eds. tabela <- data.frame(ano = c(2014, 2014, 2015, 2015, 2016, 2016), pais = c('Brasil', 'China', 'Brasil', 'China', 'Brasil', 'China'), pip = c(100,130, 110, 140, 160, 170), pop = c(3, 8, 4, 9, 6, 14)) Nosso objetivo: Criar uma terceira coluna com o pip per capta com um for Mas o que \u00e9 um for ? for (i in x){ <comando1> <comando2> } N\u00f3s lemos o for acima da seguinte maneira: Para cada valor \u201ci\u201d presente na sequ\u00eancia \u201cx\u201d, realize tais comandos. Ou seja, para cada linha da nossa tabela, some um ao percentual de votos recebidos. for(i in 1:nrow(tabela)){ print(tabela$porcentagem_de_votos[i] + 1) } Vamos entender algumas coisas aqui, nrow(tabela) \u00e9 uma fun\u00e7\u00e3o que retorna o n\u00famero de linhas de uma tabela, ou seja, seu resultado \u00e9 um n\u00famero. Quando temos 1:nrow(tabela) , estamos criando um vetor com uma sequ\u00eancia de 1 at\u00e9 o n\u00famero de linhas da nossa tabela, no caso, 6. Isso significa que nosso for vai percorrer as treze linhas da tabela. o i assumir\u00e1 os valores de 1 at\u00e9 13, por isso utilizamos tabela$porcentagem_de_votos[i], ou seja, estamos indexando as tabelas pelos valores que i assume. Vamos agora voltar ao nosso objetivo principal: Criar uma coluna chamada categoria_voto, na qual, se o voto para a disputa presidencial for maior que 70% chamaremos de \u2018super majorit\u00e1rio\u2019, caso contr\u00e1rio, chamaremos de \u2018normal\u2019. Caso a disputa seja para o governo do estados iremos considerar como \u2018super majorit\u00e1rio\u2019 um percentual maior que 80%. tabela$categoria_voto <- NA # Criando uma coluna vazia for(i in 1:nrow(tabela)){ if(tabela$tipo_disputa[i] == \"Presidencia\"){ if(tabela$porcentagem_de_votos[i] >= 70){ tabela$categoria_voto[i] <- \"super majoritario\" } else { tabela$categoria_voto[i] <- \"normal\" } } else { if(tabela$porcentagem_de_votos[i] >= 80){ tabela$categoria_voto[i] <- \"super majoritario\" } else { tabela$categoria_voto[i] <- \"normal\" } } } print(tabela)","title":"for"},{"location":"01_introducao/#exercicios_1","text":"","title":"Exerc\u00edcios"},{"location":"01_introducao/#parte-a-tipos-de-dados_1","text":"","title":"Parte A: Tipos de dados"},{"location":"01_introducao/#exercicio-1_1","text":"Execute os c\u00f3digos abaixo e verifique se s\u00e3o dados v\u00e1lidos em R. Caso verdadeiro, informe o tipo de dado: Obs: Caso apare\u00e7a \u201c+\u201d no seu console ao testar as afirma\u00e7\u00f5es, basta apertar \u201cEsc\u201d 33,5 \"Ol\u00e1 mundo\" \"O 'R' \u00e9 uma linguagem legal\" \"O 'R \u00e9 uma linguagem legal\" \"O 'R \u00e9 uma linguagem legal' 400e+10 factor(\"oi\", levels = c(\"oi\", \"tchau\")) true False","title":"Exercicio 1"},{"location":"01_introducao/#exercicio-2_1","text":"Altere o valor de v_numero para 42 v_numero <- 42.5 Altere o valor de v_caractere para \u201cuniverso\u201d. v_caractere <- \"algum texto\"` Altere o valor de v_logical para FALSE `v_logical <- TRUE`","title":"Exercicio 2"},{"location":"01_introducao/#parte-b-estrutura-de-dados","text":"","title":"Parte B: Estrutura de dados"},{"location":"01_introducao/#exercicio-1_2","text":"Crie um dataframe dos quatro primeiros candidatos com as seguintes informa\u00e7\u00f5es: Nome, Partido, N\u00famero de Votos e Porcentagem de Votos com base na imagem imgs/1turno.jpg. Usando a indexa\u00e7\u00e3o, obtenha: Todas as informa\u00e7\u00f5es do candidato Ciro Gomes O partido de todos candidatos Todas as informa\u00e7\u00f5es dos dois primeiros colocados Obtenha: A m\u00e9dia de votos de todos os candidatos A soma de votos dos dois primeiros candidatos O desvio padr\u00e3o dos votos","title":"Exercicio 1"},{"location":"01_introducao/#parte-c-controladores-de-fluxo","text":"","title":"Parte C: Controladores de fluxo"},{"location":"01_introducao/#exercicio-1_3","text":"Execute o c\u00f3digo em data/eleicoes_sp.R para criar o data frame para o exerc\u00edcio. O data frame \u00e9 o resultado da elei\u00e7\u00e3o do 1\u00ba turno de 2018 para governador do estado de S\u00e3o Paulo. Utilizando o la\u00e7o FOR e o condicional IF/ELSE, crie uma coluna no data frame com o nome \u201cporcentagem_votos\u201d em que indique a porcentagem de votos obtida por cada candidato. Crie outra coluna com o nome \u201cresultado\u201d. O valor dessa coluna deve assumir o valor \"Eleito\" caso o candidato obteve mais de 50% dos votos. Caso nenhum candidato obteve essa porcentagem, os dois candidatos com maior porcentagem de votos devem ter a coluna com o valor \"2\u00ba turno\" e os demais como \"N\u00e3o Eleito\" . Crie um script que utilize o la\u00e7o for e o if / else para verificar as duas situa\u00e7\u00f5es.","title":"Exercicio 1"},{"location":"01_visualizacao/","text":"Visualiza\u00e7\u00e3o de Dados \u00b6 Do que adianta saber o n\u00famero se voc\u00ea sabe a distribui\u00e7\u00e3o que o produziu? Por que visualizar? \u00b6","title":"Visualiza\u00e7\u00e3o de Dados"},{"location":"01_visualizacao/#visualizacao-de-dados","text":"Do que adianta saber o n\u00famero se voc\u00ea sabe a distribui\u00e7\u00e3o que o produziu?","title":"Visualiza\u00e7\u00e3o de Dados"},{"location":"01_visualizacao/#por-que-visualizar","text":"","title":"Por que visualizar?"},{"location":"02_transformar/","text":"Transformar \u00b6 Deixe de lado a ilus\u00e3o de que analisar dados \u00e9 apenas aplicar modelos. Antes, precisamos preparar os dados! Por que transformar dados? \u00b6","title":"Transformar"},{"location":"02_transformar/#transformar","text":"Deixe de lado a ilus\u00e3o de que analisar dados \u00e9 apenas aplicar modelos. Antes, precisamos preparar os dados!","title":"Transformar"},{"location":"02_transformar/#por-que-transformar-dados","text":"","title":"Por que transformar dados?"}]}